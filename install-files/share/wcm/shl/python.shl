start newline;

chars a [a-zA-Z]; 
chars d [0-9];
chars s [\t\ ];

state newline default {
	rule	<\n>	{ state = newline; };
	rule	<\"\"\">	{ state=string_1; color=STRING; };
	rule	<\'\'\'>	{ state=string_2; color=STRING; };
	rule	<#!>	{ state=comment_attn; color=ATTN; };
	rule	<#>	{ state=comment; color=COMMENT; };
	rule	<$(s)+> ;
	rule	<\">	{ state=string; color=STRING; };
	rule	<\'>	{ state=char; color=STRING; };
	
	rule	<0x[0-9a-fA-F]+>	{ state = default; color = NUM; };
	rule	<0o[0-7]+>	{ state = default; color = NUM; };
	rule	<$(d)+[\.]*$(d)*[eE]*$(d)*>	{ state = default; color = NUM; };
	
	rule <[!~*+\-=|\>\<&\^?%]+> { state = default; color = OPER; };
	
	rule <[{}():;,]> { state = default;  color = KEYWORD; };
	
	rule	<[$(a)$(d)_]+>	{ 
		state = default;  
		
		words (PRE) = {
			'import', 'from'
		};
		
		words (KEYWORD) = {
			'self'
		};

		words (KEYWORD) = {
			'and','as','assert',
			'break',
			'class','continue',
			'def','del',
			'elif','else','except','exec',
			'finally','for',
			#'from',
			'global',
			'if',
			#'import',
			'in','is',
			'lambda',
			'not',
			'or',
			'pass','print',
			'raise','return',
			'try',
			'while','with',
			'yield'
		};
		
		words (KEYWORD) = {
			'abs','all','any',
			'basestring','bin','bool',
			'callable','chr','classmethod','cmp','coerce','compile','complex',
			'delattr','dict','dir','divmod',
			'enumerate','eval','execfile',
			'file','filter','float','frozenset',
			'getattr','globals',
			'hasattr','hash','help','hex',
			'id','input','int','isinstance','issubclass','iter',
			'len','list','locals','long',
			'map','max','min',
			'next',
			'object','oct','open','ord',
			'pow','print','property',
			'range','raw_input','reduce','reload','repr','reversed','round',
			'setattr','slice','sorted','staticmethod','str','sum','super',
			'tuple','type',
			'unichr','unicode',
			'vars',
			'xrange',
			'zip' };
			
		words (KEYWORD) = {
			'atof','atoi','atol',
			'expandtabs',
			'find',
			'rfind',
			'index',
			'rindex',
			'count',
			'split','splitfields',
			'join','joinfields',
			'strip',
			'lstrip',
			'rstrip',
			'swapcase',
			'upper',
			'lower','ljust',
			'rjust',
			'center',
			'zfill' };
			
		words (KEYWORD) = {
			'__init__',
			'__del__',
			'__repr__',
			'__str__',
			'__cmp__',
			'__hash__',
			'__call__',
			'__getattr__',
			'__setattr__',
			'__delattr__',
			'__len__',
			'__getitem__',
			'__setitem__',
			'__delitem__',
			'__getslice__',
			'__setslice__',
			'__delslice__',
			'__add__',
			'__sub__',
			'__mul__',
			'__div__',
			'__mod__',
			'__divmod__',
			'__pow__',
			'__lshift__',
			'__rshift__',
			'__and__',
			'__xor__',
			'__or__',
			'__neg__',
			'__pos__',
			'__abs__',
			'__invert__',
			'__nonzero__',
			'__coerce__',
			'__int__',
			'__long__',
			'__float__',
			'__oct__',
			'__hex__',
			'__radd__',
			'__rsub__',
			'__rmul__',
			'__rdiv__',
			'__rmod__',
			'__rdivmod__',
			'__rpow__',
			'__rlshift__',
			'__rrshift__',
			'__rand__',
			'__rxor__',
			'__ror__'
		};
	};
};

state newline {;
	rule	<\#>	 {state=pre;	color=PRE; };
	rule 	<[^$(s)]> { state=default; };
};
	
state string_1	{
	color=STRING;
	rule	<\"\"\">	{ state=default; };
};

state string_2	{
	color=STRING;
	rule	<\'\'\'>	{ state=default; };
};
	
state comment	{
	color = COMMENT;
	rule	<\\\n>;
	rule	<\n>	{state=newline;};
};

state comment_attn	{
	color = ATTN;
	rule	<\\\n>;
	rule	<\n>	{state=newline;};
};
	
state string {
	color = STRING;
	rule	<\\\\>;
	rule	<\\\">;
#	rule	<\\> { color = ATTN; };
	rule	<\">	{state=default;};
};

state char {
	color = STRING;
	rule	<\\\\>;
	rule	<\\\'>;
	rule	<\'>	{state=default;};
};
