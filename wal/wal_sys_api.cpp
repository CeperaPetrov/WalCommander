/*
	Copyright (c) by Valery Goryachev (Wal)
*/


#include "wal_sys_api.h"

#include <stdio.h>
#include <stdarg.h>

#ifdef _WIN32
	#include <process.h> 
#else 
	#include <stdlib.h>
	#include <string.h>
#endif

namespace wal {

static void sys_locale_init();

#ifdef _DEBUG

void dbg_printf(const char *format, ...)
{
	va_list ap;
	va_start(ap, format);
	vprintf(format, ap);
	va_end(ap);
}

#endif 


#ifdef _WIN32

#define INFMETA 0x19701027

struct _thread_info {
	unsigned meta;
	HANDLE handle;
	void *(*f)(void*);
	void *data;
	void *ret;
};

static DWORD tlsId = TLS_OUT_OF_INDEXES; 


static /*void*/ unsigned __stdcall _thRun(void*a)
{
	_thread_info *p = (_thread_info*)a;
	if (!TlsSetValue(tlsId, p)) {
		;//???
	}
	
	try {
		p->ret = p->f(p->data);
	} catch (...) {
		p->ret = 0;
	}
	
	if (!(p->handle)) free(p);
	return 0;
}

int thread_create(thread_t *th, void *(*f)(void*), void*arg, bool detached )
{
	if (tlsId == TLS_OUT_OF_INDEXES) {
		tlsId = TlsAlloc();
		if (tlsId == TLS_OUT_OF_INDEXES) return -1;
		TlsSetValue(tlsId, 0);
	}

	_thread_info *tinfo = (_thread_info*)malloc(sizeof(_thread_info));
	if (!tinfo) { 
		SetLastError(ERROR_NOT_ENOUGH_MEMORY);
		return -1;
	};

	tinfo->meta = INFMETA;
	tinfo->f = f;
	tinfo->data = arg;
	tinfo->ret = 0;
	tinfo->handle = 0; //for detached - 0

	uintptr_t r = _beginthreadex(0, 0, _thRun, tinfo, detached ? 0 : CREATE_SUSPENDED, 0);

	if (r == -1L) {
		free(tinfo);
		SetLastError(ERROR_TOO_MANY_TCBS);
		return -1;
	}

	if (detached) {
		CloseHandle((HANDLE)r);
		if (th) *th = 0;
		return 0;
	} else {
		tinfo->handle = (HANDLE)r;
		if (th) *th = tinfo;
		ResumeThread((HANDLE)r);
	}
	return 0;
}

thread_t thread_self()
{
	if (tlsId == TLS_OUT_OF_INDEXES) return 0;
	return (thread_t)TlsGetValue(tlsId);
}

int thread_join(thread_t th, void **val)
{
	if (!th || th->meta != INFMETA || th->handle == 0)
	{
		SetLastError(ERROR_INVALID_PARAMETER);
		return -1;
	}

	if (WaitForSingleObject(th->handle, INFINITE) != WAIT_OBJECT_0)
		return -1; //неясно что делать с p

	if (val) *val = th->ret;
	CloseHandle(th->handle);
	free(th);
	return 0;
}

int cond_create(cond_t *c)
{
	c->ev[0] = c->ev[1] = 0;
	if (!(c->ev[0] = CreateEvent(NULL, TRUE, FALSE, NULL)) || !(c->ev[1] = CreateEvent(NULL, FALSE, FALSE, NULL)))
	{
		DWORD e = GetLastError();
		if (c->ev[0]) { CloseHandle(c->ev[0]); c->ev[0]=0; }
		if (c->ev[1]) { CloseHandle(c->ev[1]); c->ev[1]=0; }
		SetLastError(e);
		return -1;
	}
	return 0;
}

int cond_delete(cond_t *c)
{
	DWORD e0 = (CloseHandle(c->ev[0])==S_OK) ? 0 : GetLastError();
	DWORD e1 = (CloseHandle(c->ev[1])==S_OK) ? 0 : GetLastError();
	if (e0) { SetLastError(e0); return -1; }
	if (e1) { SetLastError(e1); return -1; }
	return 0; 
}

int cond_wait(cond_t*c, mutex_t*m)
{
	if (mutex_unlock(m)) return -1;
	DWORD ret = WaitForMultipleObjects(2, c->ev, FALSE, INFINITE);
	if (mutex_lock(m)) return -1;
	if (ret == WAIT_OBJECT_0 || ret == WAIT_OBJECT_0+1) return 0;
	return -1;
}

int cond_signal(cond_t*c){ return SetEvent(c->ev[1]) ? 0 : -1; } 
int cond_broadcast(cond_t*c){ 	return PulseEvent(c->ev[0]) ? 0 : -1; }; 




//return count of characters (length of buffer for conversion to unicode)
int sys_symbol_count(const sys_char_t *s, int len)
{
	if (len<0) {
		for (len = 0; *s; s++) len++;
	}
	return len;
}

//return count of sys_chars for saving s
int sys_string_buffer_len(const unicode_t *s, int ulen) //not including \0
{
	if (ulen<0) {
		for (ulen = 0; *s; s++) ulen++;
	}
	return ulen;
}

// return point of appended \0
unicode_t* sys_to_unicode(
		unicode_t *buf, 
		const sys_char_t *s, int len,
		int *badCount)
{
	if (len<0) {
		for (; *s; s++, buf++) *buf = *s;
	} else {
		for (int i = 0; i<len; i++, s++, buf++) *buf = *s;
	}
	*buf = 0;
	if (badCount) *badCount = 0;
	return buf;
}

// return point of appended \0
sys_char_t* unicode_to_sys(
		sys_char_t *s, 
		const unicode_t *buf, int ulen, 
		int *badCount)
{
	if (ulen<0) {
		for (; *buf; s++, buf++) *s = *buf;
	} else {
		for (int i = 0; i<ulen; i++, s++, buf++) *s = *buf;
	}
	*s = 0;
	if (badCount) *badCount = 0;
	return s;
}

sys_char_t* sys_error_str(int err, sys_char_t *buf, int size)
{
	if (err==0) err = GetLastError();

	if (FormatMessageW( 
		FORMAT_MESSAGE_FROM_SYSTEM | 
		FORMAT_MESSAGE_IGNORE_INSERTS,
		NULL,
		err,
		MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), // Default language
		buf,
		size,
		NULL 
		)<2) 
		_snwprintf(buf, size, L"Error code: %i", int(err));
	if (size>0) buf[size-1] = 0;
	for (sys_char_t *s= buf; *s; s++) if (*s == '\r') *s = ' ';
	return buf;
}

bool InitSystemLocales()
{ 
	sys_locale_init();
	return true; 
}

#else

int sys_charset_id = CS_LATIN1;

extern unicode_t* latin1_to_unicode(unicode_t *buf, const char *s, int size, int *badCount);
extern char* unicode_to_latin1(char *s, const unicode_t *buf, int usize, int *badCount);
extern int cp8_symbol_count(const char *s, int size);
extern int cp8_string_buffer_len(const unicode_t *buf, int ulen);

unicode_t* (*fp_sys_to_unicode)(unicode_t *buf, const sys_char_t *s, int size, int *badCount) = latin1_to_unicode;
sys_char_t* (*fp_unicode_to_sys)(sys_char_t *s, const unicode_t *buf, int usize, int *badCount) = unicode_to_latin1;
int (*fp_sys_symbol_count)(const sys_char_t *s, int size) = cp8_symbol_count;
int (*fp_sys_string_buffer_len)(const unicode_t *s, int ulen ) = cp8_string_buffer_len;


struct LacaleCharsetAlias {
	const char * alias;
	int id;
};

static LacaleCharsetAlias csAliasTable[] = {
	{"UTF-8",	CS_UTF8},
	{"CP1251",	CS_WIN1251},
	{"CP866",	CS_CP866},
	{"KOI8-R",	CS_KOI8R},
	{"KOI8R",	CS_KOI8R},
	{0,0}
};

static void set_sys_charset(int id)
{
	charset_struct *p = charset_table[id];
	fp_sys_to_unicode = p->cs_to_unicode;
	fp_unicode_to_sys = p->unicode_to_cs;
	fp_sys_symbol_count = p->symbol_count;
	fp_sys_string_buffer_len = p->string_buffer_len;
	sys_charset_id = id;
};

bool InitSystemLocales()
{
	sys_locale_init();
	
	set_sys_charset(CS_UTF8);
	
	char *s = getenv("LANG");
	if (!s) 
		return true;

	while (*s && *s!='.') s++;
	if (*s=='.') s++;
	
	for (LacaleCharsetAlias *p = csAliasTable; p->alias; p++)
		if (!strcasecmp(s, p->alias)) {
			set_sys_charset(p->id);
			return true;
		}
		

	printf("'%s' (charset not found)\n",s);

	return true;
}

sys_char_t* sys_error_str(int err, sys_char_t *buf, int size)
{
	if (size>0)
	{
		buf[0]=0;
		
	
#if defined(__FreeBSD__) || defined(_POSIX_C_SOURCE) && defined(_XOPEN_SOURCE) && defined(_GNU_SOURCE) && (_POSIX_C_SOURCE >= 200112L || _XOPEN_SOURCE >= 600) && ! _GNU_SOURCE
		strerror_r(err, buf, size);		
#else
		return strerror_r(err, buf, size);
#endif		
	
	}
	return buf;
}
#endif

static char locale_lang[32]="";
static char locale_ter[32]="";
static char locale_lang_ter[32] = "";
static const char *locale_str = 0;

#ifdef _WIN32
struct W32LCNode {
	int n;
	const char *lang;
};

static W32LCNode w32LCNode[] = {
{0x0001,"ar"},	{0x0002,"bg"},	{0x0003,"ca"},	{0x0004,"zh_Hans"},	{0x0005,"cs"},	
{0x0006,"da"},	{0x0007,"de"},	{0x0008,"el"},	{0x0009,"en"},	{0x000a,"es"},	
{0x000b,"fi"},	{0x000c,"fr"},	{0x000d,"he"},	{0x000e,"hu"},	{0x000f,"is"},	
{0x0010,"it"},	{0x0011,"ja"},	{0x0012,"ko"},	{0x0013,"nl"},	{0x0014,"no"},
{0x0015,"pl"},	{0x0016,"pt"},	{0x0017,"rm"},	{0x0018,"ro"},	{0x0019,"ru"},
{0x001a,"bs"},	{0x001b,"sk"},	{0x001c,"sq"},	{0x001d,"sv"},	{0x001e,"th"},
{0x001f,"tr"},	{0x0020,"ur"},	{0x0021,"id"},	{0x0022,"uk"},	{0x0023,"be"},
{0x0024,"sl"},	{0x0025,"et"},	{0x0026,"lv"},	{0x0027,"lt"},	{0x0028,"tg"},
{0x0029,"fa"},	{0x002a,"vi"},	{0x002b,"hy"},	{0x002c,"az"},	{0x002d,"eu"},
{0x002e,"dsb"},	{0x002f,"mk"},	{0x0030,"st"},	{0x0031,"ts"},	{0x0032,"tn"},
{0x0033,"ve"},	{0x0034,"xh"},	{0x0035,"zu"},	{0x0036,"af"},	{0x0037,"ka"},
{0x0038,"fo"},	{0x0039,"hi"},	{0x003a,"mt"},	{0x003b,"se"},	{0x003c,"ga"},
{0x003d,"yi"},	{0x003e,"ms"},	{0x003f,"kk"},	{0x0040,"ky"},	{0x0041,"sw"},
{0x0042,"tk"},	{0x0043,"uz"},	{0x0044,"tt"},	{0x0045,"bn"},	{0x0046,"pa"},
{0x0047,"gu"},	{0x0048,"or"},	{0x0049,"ta"},	{0x004a,"te"},	{0x004b,"kn"},
{0x004c,"ml"},	{0x004d,"as"},	{0x004e,"mr"},	{0x004f,"sa"},	{0x0050,"mn"},
{0x0051,"bo"},	{0x0052,"cy"},	{0x0053,"km"},	{0x0054,"lo"},	{0x0055,"my"},
{0x0056,"gl"},	{0x0057,"kok"},	{0x0058,"mni"},	{0x0059,"sd"},	{0x005a,"syr"},
{0x005b,"si"},	{0x005c,"chr"},	{0x005d,"iu"},	{0x005e,"am"},	{0x005f,"tzm"},
{0x0060,"ks"},	{0x0061,"ne"},	{0x0062,"fy"},	{0x0063,"ps"},	{0x0064,"fil"},
{0x0065,"dv"},	{0x0066,"bin"},	{0x0067,"ff"},	{0x0068,"ha"},	{0x0069,"ibb"},
{0x006a,"yo"},	{0x006b,"quz"},	{0x006c,"nso"},	{0x006d,"ba"},	{0x006e,"lb"},
{0x006f,"kl"},	{0x0070,"ig"},	{0x0071,"kr"},	{0x0072,"om"},	{0x0073,"ti"},
{0x0074,"gn"},	{0x0075,"haw"},	{0x0076,"la"},	{0x0077,"so"},	{0x0078,"ii"},
{0x0079,"pap"},	{0x007a,"arn"},	{0x007b,"Neither"},	{0x007c,"moh"},	{0x007d,"Neither"},
{0x007e,"br"},	{0x007f,"Reserved"},{0x0080,"ug"},{0x0081,"mi"},{0x0082,"oc"},
{0x0083,"co"},	{0x0084,"gsw"},	{0x0085,"sah"},	{0x0086,"qut"},	{0x0087,"rw"},
{0x0088,"wo"},	{0x0089,"Neither"},	{0x008a,"Neither"},	{0x008b,"Neither"},	{0x008c,"prs"},
{0x008d,"Neither"},	{0x008e,"Neither"},	{0x008f,"Neither"},	{0x0090,"Neither"},	{0x0091,"gd"},
{0x0092,"ku"},	{0x0093,"quc"},	{0x0401,"ar_SA"},	{0x0402,"bg_BG"},	{0x0403,"ca_ES"},
{0x0404,"zh_TW"},	{0x0405,"cs_CZ"},	{0x0406,"da_DK"},	{0x0407,"de_DE"},	{0x0408,"el_GR"},
{0x0409,"en_US"},	{0x040a,"es_ES_tradnl"},	{0x040b,"fi_FI"},	{0x040c,"fr_FR"},	{0x040d,"he_IL"},
{0x040e,"hu_HU"},	{0x040f,"is_IS"},	{0x0410,"it_IT"},	{0x0411,"ja_JP"},	{0x0412,"ko_KR"},
{0x0413,"nl_NL"},	{0x0414,"nb_NO"},	{0x0415,"pl_PL"},	{0x0416,"pt_BR"},	{0x0417,"rm_CH"},
{0x0418,"ro_RO"},	{0x0419,"ru_RU"},	{0x041a,"hr_HR"},	{0x041b,"sk_SK"},	{0x041c,"sq_AL"},
{0x041d,"sv_SE"},	{0x041e,"th_TH"},	{0x041f,"tr_TR"},	{0x0420,"ur_PK"},	{0x0421,"id_ID"},
{0x0422,"uk_UA"},	{0x0423,"be_BY"},	{0x0424,"sl_SI"},	{0x0425,"et_EE"},	{0x0426,"lv_LV"},
{0x0427,"lt_LT"},	{0x0428,"tg_Cyrl_TJ"},	{0x0429,"fa_IR"},	{0x042a,"vi_VN"},	{0x042b,"hy_AM"},
{0x042c,"az_Latn_AZ"},	{0x042d,"eu_ES"},	{0x042e,"hsb_DE"},	{0x042f,"mk_MK"},	{0x0430,"st_ZA"},
{0x0431,"ts_ZA"},	{0x0432,"tn_ZA"},	{0x0433,"ve_ZA"},	{0x0434,"xh_ZA"},	{0x0435,"zu_ZA"},
{0x0436,"af_ZA"},	{0x0437,"ka_GE"},	{0x0438,"fo_FO"},	{0x0439,"hi_IN"},	{0x043a,"mt_MT"},
{0x043b,"se_NO"},	{0x043d,"yi_Hebr"},	{0x043e,"ms_MY"},	{0x043f,"kk_KZ"},	{0x0440,"ky_KG"},
{0x0441,"sw_KE"},	{0x0442,"tk_TM"},	{0x0443,"uz_Latn_UZ"},	{0x0444,"tt_RU"},	{0x0445,"bn_IN"},
{0x0446,"pa_IN"},	{0x0447,"gu_IN"},	{0x0448,"or_IN"},	{0x0449,"ta_IN"},	{0x044a,"te_IN"},
{0x044b,"kn_IN"},	{0x044c,"ml_IN"},	{0x044d,"as_IN"},	{0x044e,"mr_IN"},	{0x044f,"sa_IN"},
{0x0450,"mn_MN"},	{0x0451,"bo_CN"},	{0x0452,"cy_GB"},	{0x0453,"km_KH"},	{0x0454,"lo_LA"},
{0x0455,"my_MM"},	{0x0456,"gl_ES"},	{0x0457,"kok_IN"},	{0x0458,"mni_IN"},	{0x0459,"sd_Deva_IN"},
{0x045a,"syr_SY"},	{0x045b,"si_LK"},	{0x045c,"chr_Cher_US"},	{0x045d,"iu_Cans_CA"},	{0x045e,"am_ET"},
{0x045f,"tzm_Arab_MA"},	{0x0460,"ks_Arab"},	{0x0461,"ne_NP"},	{0x0462,"fy_NL"},	{0x0463,"ps_AF"},
{0x0464,"fil_PH"},	{0x0465,"dv_MV"},	{0x0466,"bin_NG"},	{0x0467,"fuv_NG"},	{0x0468,"ha_Latn_NG"},
{0x0469,"ibb_NG"},	{0x046a,"yo_NG"},	{0x046b,"quz_BO"},	{0x046c,"nso_ZA"},	{0x046d,"ba_RU"},
{0x046e,"lb_LU"},	{0x046f,"kl_GL"},	{0x0470,"ig_NG"},	{0x0471,"kr_NG"},	{0x0472,"om_ET"},
{0x0473,"ti_ET"},	{0x0474,"gn_PY"},	{0x0475,"haw_US"},	{0x0476,"la_Latn"},	{0x0477,"so_SO"},
{0x0478,"ii_CN"},	{0x0479,"pap_029"},	{0x047a,"arn_CL"},	{0x047c,"moh_CA"},	{0x047e,"br_FR"},
{0x0480,"ug_CN"},	{0x0481,"mi_NZ"},	{0x0482,"oc_FR"},	{0x0483,"co_FR"},	{0x0484,"gsw_FR"},
{0x0485,"sah_RU"},	{0x0486,"qut_GT"},	{0x0487,"rw_RW"},	{0x0488,"wo_SN"},	{0x048c,"prs_AF"},
{0x048d,"plt_MG"},	{0x048e,"zh_yue_HK"},	{0x048f,"tdd_Tale_CN"},	{0x0490,"khb_Talu_CN"},	{0x0491,"gd_GB"},
{0x0492,"ku_Arab_IQ"},	{0x0493,"quc_CO"},	{0x0501,"qps_ploc"},	{0x05fe,"qps_ploca"},	{0x0801,"ar_IQ"},
{0x0803,"ca_ES_valencia"},	{0x0804,"zh_CN"},	{0x0807,"de_CH"},	{0x0809,"en_GB"},	{0x080a,"es_MX"},
{0x080c,"fr_BE"},	{0x0810,"it_CH"},	{0x0811,"ja_Ploc_JP"},	{0x0813,"nl_BE"},	{0x0814,"nn_NO"},
{0x0816,"pt_PT"},	{0x0818,"ro_MD"},	{0x0819,"ru_MD"},	{0x081a,"sr_Latn_CS"},	{0x081d,"sv_FI"},
{0x0820,"ur_IN"},	{0x0827,"Neither"},	{0x082c,"az_Cyrl_AZ"},	{0x082e,"dsb_DE"},	{0x0832,"tn_BW"},
{0x083b,"se_SE"},	{0x083c,"ga_IE"},	{0x083e,"ms_BN"},	{0x0843,"uz_Cyrl_UZ"},	{0x0845,"bn_BD"},
{0x0846,"pa_Arab_PK"},	{0x0849,"ta_LK"},	{0x0850,"mn_Mong_CN"},	{0x0851,"bo_BT"},	{0x0859,"sd_Arab_PK"},
{0x085d,"iu_Latn_CA"},	{0x085f,"tzm_Latn_DZ"},	{0x0860,"ks_Deva"},	{0x0861,"ne_IN"},	{0x0867,"ff_Latn_SN"},
{0x086b,"quz_EC"},	{0x0873,"ti_ER"},	{0x09ff,"qps_plocm"},	{0x0c01,"ar_EG"},	{0x0c04,"zh_HK"},
{0x0c07,"de_AT"},	{0x0c09,"en_AU"},	{0x0c0a,"es_ES"},	{0x0c0c,"fr_CA"},	{0x0c1a,"sr_Cyrl_CS"},
{0x0c3b,"se_FI"},	{0x0c50,"mn_Mong_MN"},	{0x0c5f,"tmz_MA"},	{0x0c6b,"quz_PE"},	{0x1001,"ar_LY"},
{0x1004,"zh_SG"},	{0x1007,"de_LU"},	{0x1009,"en_CA"},	{0x100a,"es_GT"},	{0x100c,"fr_CH"},
{0x101a,"hr_BA"},	{0x103b,"smj_NO"},	{0x105f,"tzm_Tfng_MA"},	{0x1401,"ar_DZ"},	{0x1404,"zh_MO"},
{0x1407,"de_LI"},	{0x1409,"en_NZ"},	{0x140a,"es_CR"},	{0x140c,"fr_LU"},	{0x141a,"bs_Latn_BA"},
{0x143b,"smj_SE"},	{0x1801,"ar_MA"},	{0x1809,"en_IE"},	{0x180a,"es_PA"},	{0x180c,"fr_MC"},
{0x181a,"sr_Latn_BA"},	{0x183b,"sma_NO"},	{0x1c01,"ar_TN"},	{0x1c09,"en_ZA"},	{0x1c0a,"es_DO"},
{0x1c0c,"Neither"},	{0x1c1a,"sr_Cyrl_BA"},	{0x1c3b,"sma_SE"},	{0x2001,"ar_OM"},	{0x2008,"Neither"},
{0x2009,"en_JM"},	{0x200a,"es_VE"},	{0x200c,"fr_RE"},	{0x201a,"bs_Cyrl_BA"},	{0x203b,"sms_FI"},
{0x2401,"ar_YE"},	{0x2409,"en_029"},	{0x240a,"es_CO"},	{0x240c,"fr_CD"},	{0x241a,"sr_Latn_RS"},
{0x243b,"smn_FI"},	{0x2801,"ar_SY"},	{0x2809,"en_BZ"},	{0x280a,"es_PE"},	{0x280c,"fr_SN"},
{0x281a,"sr_Cyrl_RS"},	{0x2c01,"ar_JO"},	{0x2c09,"en_TT"},	{0x2c0a,"es_AR"},	{0x2c0c,"fr_CM"},
{0x2c1a,"sr_Latn_ME"},	{0x3001,"ar_LB"},	{0x3009,"en_ZW"},	{0x300a,"es_EC"},	{0x300c,"fr_CI"},
{0x301a,"sr_Cyrl_ME"},	{0x3401,"ar_KW"},	{0x3409,"en_PH"},	{0x340a,"es_CL"},	{0x340c,"fr_ML"},
{0x3801,"ar_AE"},	{0x3809,"en_ID"},	{0x380a,"es_UY"},	{0x380c,"fr_MA"},	{0x3c01,"ar_BH"},
{0x3c09,"en_HK"},	{0x3c0a,"es_PY"},	{0x3c0c,"fr_HT"},	{0x4001,"ar_QA"},	{0x4009,"en_IN"},
{0x400a,"es_BO"},	{0x4401,"ar_Ploc_SA"},	{0x4409,"en_MY"},	{0x440a,"es_SV"},	{0x4801,"ar_145"},
{0x4809,"en_SG"},	{0x480a,"es_HN"},	{0x4c09,"en_AE"},	{0x4c0a,"es_NI"},	{0x5009,"en_BH"},
{0x500a,"es_PR"},	{0x5409,"en_EG"},	{0x540a,"es_US"},	{0x5809,"en_JO"},	{0x580a,"es_419"},
{0x5c09,"en_KW"},	{0x6009,"en_TR"},	{0x6409,"en_YE"},	{0x641a,"bs_Cyrl"},	{0x681a,"bs_Latn"},
{0x6c1a,"sr_Cyrl"},	{0x701a,"sr_Latn"},	{0x703b,"smn"},		{0x742c,"az_Cyrl"},	{0x743b,"sms"},
{0x7804,"zh"},		{0x7814,"nn"},		{0x781a,"bs"},		{0x782c,"az_Latn"},	{0x783b,"sma"},
{0x7843,"uz_Cyrl"},	{0x7850,"mn_Cyrl"},	{0x785d,"iu_Cans"},	{0x785f,"tzm_Tfng"},	{0x7c04,"zh_Hant"},
{0x7c14,"nb"},		{0x7c1a,"sr"},		{0x7c28,"tg_Cyrl"},	{0x7c2e,"dsb"},		{0x7c3b,"smj"},
{0x7c43,"uz_Latn"},	{0x7c46,"pa_Arab"},	{0x7c50,"mn_Mong"},	{0x7c59,"sd_Arab"},	{0x7c5c,"chr_Cher"},
{0x7c5d,"iu_Latn"},	{0x7c5f,"tzm_Latn"},	{0x7c67,"ff_Latn"},	{0x7c68,"ha_Latn"},	{0x7c92,"ku_Arab"},
{0,0}
};


#endif

static void sys_locale_init()
{
	if (!locale_str) 
	{
		#ifdef _WIN32
			unsigned lcid = GetUserDefaultLCID();
			for (W32LCNode * p = w32LCNode; p->n && p->lang; p++)
				if (p->n == lcid) {
					locale_str = p->lang;
					break;
				};
		#else
			locale_str = getenv("LANG");
		#endif
		
		if (!locale_str) locale_str = "en";
		
		if (locale_str) 
		{
			const char *s = locale_str;
			int i;
			for (i=0 ;i < sizeof(locale_lang)-1 && *s && *s !='_' && *s !='.'; i++, s++) locale_lang[i] = *s;
			locale_lang[i] = 0;
			
			for (i=0 ;i < sizeof(locale_ter)-1 && *s && *s !='.'; i++, s++) locale_ter[i] = *s;
			locale_ter[i] = 0;
			
			s = locale_str;
			for (i=0 ;i < sizeof(locale_lang_ter)-1 && *s && *s !='.'; i++, s++) locale_lang_ter[i] = *s;
			locale_lang_ter[i] = 0;
		}
	};
}

const char *sys_locale_lang(){ return locale_lang; }
const char *sys_locale_ter(){ return locale_ter;}
const char *sys_locale_lang_ter(){ return locale_lang_ter; }


/*
	Copyright (c) by Valery Goryachev (Wal)
*/


static unsigned short tab1024[1024]={
	0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x000E, 0x000F, 
	0x0010, 0x0011, 0x0012, 0x0013, 0x0014, 0x0015, 0x0016, 0x0017, 0x0018, 0x0019, 0x001A, 0x001B, 0x001C, 0x001D, 0x001E, 0x001F, 
	0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027, 0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x002E, 0x002F, 
	0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037, 0x0038, 0x0039, 0x003A, 0x003B, 0x003C, 0x003D, 0x003E, 0x003F, 
	0x0040, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067, 0x0068, 0x0069, 0x006A, 0x006B, 0x006C, 0x006D, 0x006E, 0x006F, 
	0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077, 0x0078, 0x0079, 0x007A, 0x005B, 0x005C, 0x005D, 0x005E, 0x005F, 
	0x0060, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067, 0x0068, 0x0069, 0x006A, 0x006B, 0x006C, 0x006D, 0x006E, 0x006F, 
	0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077, 0x0078, 0x0079, 0x007A, 0x007B, 0x007C, 0x007D, 0x007E, 0x007F, 
	0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087, 0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F, 
	0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097, 0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F, 
	0x00A0, 0x00A1, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7, 0x00A8, 0x00A9, 0x00AA, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF, 
	0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x03BC, 0x00B6, 0x00B7, 0x00B8, 0x00B9, 0x00BA, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00BF, 
	0x00E0, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x00E7, 0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF, 
	0x00F0, 0x00F1, 0x00F2, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x00D7, 0x00F8, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x00FD, 0x00FE, 0x00DF, 
	0x00E0, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x00E7, 0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF, 
	0x00F0, 0x00F1, 0x00F2, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x00F7, 0x00F8, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x00FD, 0x00FE, 0x00FF, 
	0x0101, 0x0101, 0x0103, 0x0103, 0x0105, 0x0105, 0x0107, 0x0107, 0x0109, 0x0109, 0x010B, 0x010B, 0x010D, 0x010D, 0x010F, 0x010F, 
	0x0111, 0x0111, 0x0113, 0x0113, 0x0115, 0x0115, 0x0117, 0x0117, 0x0119, 0x0119, 0x011B, 0x011B, 0x011D, 0x011D, 0x011F, 0x011F, 
	0x0121, 0x0121, 0x0123, 0x0123, 0x0125, 0x0125, 0x0127, 0x0127, 0x0129, 0x0129, 0x012B, 0x012B, 0x012D, 0x012D, 0x012F, 0x012F, 
	0x0130, 0x0131, 0x0133, 0x0133, 0x0135, 0x0135, 0x0137, 0x0137, 0x0138, 0x013A, 0x013A, 0x013C, 0x013C, 0x013E, 0x013E, 0x0140, 
	0x0140, 0x0142, 0x0142, 0x0144, 0x0144, 0x0146, 0x0146, 0x0148, 0x0148, 0x0149, 0x014B, 0x014B, 0x014D, 0x014D, 0x014F, 0x014F, 
	0x0151, 0x0151, 0x0153, 0x0153, 0x0155, 0x0155, 0x0157, 0x0157, 0x0159, 0x0159, 0x015B, 0x015B, 0x015D, 0x015D, 0x015F, 0x015F, 
	0x0161, 0x0161, 0x0163, 0x0163, 0x0165, 0x0165, 0x0167, 0x0167, 0x0169, 0x0169, 0x016B, 0x016B, 0x016D, 0x016D, 0x016F, 0x016F, 
	0x0171, 0x0171, 0x0173, 0x0173, 0x0175, 0x0175, 0x0177, 0x0177, 0x00FF, 0x017A, 0x017A, 0x017C, 0x017C, 0x017E, 0x017E, 0x0073, 
	0x0180, 0x0253, 0x0183, 0x0183, 0x0185, 0x0185, 0x0254, 0x0188, 0x0188, 0x0256, 0x0257, 0x018C, 0x018C, 0x018D, 0x01DD, 0x0259, 
	0x025B, 0x0192, 0x0192, 0x0260, 0x0263, 0x0195, 0x0269, 0x0268, 0x0199, 0x0199, 0x019A, 0x019B, 0x026F, 0x0272, 0x019E, 0x0275, 
	0x01A1, 0x01A1, 0x01A3, 0x01A3, 0x01A5, 0x01A5, 0x0280, 0x01A8, 0x01A8, 0x0283, 0x01AA, 0x01AB, 0x01AD, 0x01AD, 0x0288, 0x01B0, 
	0x01B0, 0x028A, 0x028B, 0x01B4, 0x01B4, 0x01B6, 0x01B6, 0x0292, 0x01B9, 0x01B9, 0x01BA, 0x01BB, 0x01BD, 0x01BD, 0x01BE, 0x01BF, 
	0x01C0, 0x01C1, 0x01C2, 0x01C3, 0x01C6, 0x01C6, 0x01C6, 0x01C9, 0x01C9, 0x01C9, 0x01CC, 0x01CC, 0x01CC, 0x01CE, 0x01CE, 0x01D0, 
	0x01D0, 0x01D2, 0x01D2, 0x01D4, 0x01D4, 0x01D6, 0x01D6, 0x01D8, 0x01D8, 0x01DA, 0x01DA, 0x01DC, 0x01DC, 0x01DD, 0x01DF, 0x01DF, 
	0x01E1, 0x01E1, 0x01E3, 0x01E3, 0x01E5, 0x01E5, 0x01E7, 0x01E7, 0x01E9, 0x01E9, 0x01EB, 0x01EB, 0x01ED, 0x01ED, 0x01EF, 0x01EF, 
	0x01F0, 0x01F3, 0x01F3, 0x01F3, 0x01F5, 0x01F5, 0x0195, 0x01BF, 0x01F9, 0x01F9, 0x01FB, 0x01FB, 0x01FD, 0x01FD, 0x01FF, 0x01FF, 
	0x0201, 0x0201, 0x0203, 0x0203, 0x0205, 0x0205, 0x0207, 0x0207, 0x0209, 0x0209, 0x020B, 0x020B, 0x020D, 0x020D, 0x020F, 0x020F, 
	0x0211, 0x0211, 0x0213, 0x0213, 0x0215, 0x0215, 0x0217, 0x0217, 0x0219, 0x0219, 0x021B, 0x021B, 0x021D, 0x021D, 0x021F, 0x021F, 
	0x019E, 0x0221, 0x0223, 0x0223, 0x0225, 0x0225, 0x0227, 0x0227, 0x0229, 0x0229, 0x022B, 0x022B, 0x022D, 0x022D, 0x022F, 0x022F, 
	0x0231, 0x0231, 0x0233, 0x0233, 0x0234, 0x0235, 0x0236, 0x0237, 0x0238, 0x0239, 0x2C65, 0x023C, 0x023C, 0x019A, 0x2C66, 0x023F, 
	0x0240, 0x0242, 0x0242, 0x0180, 0x0289, 0x028C, 0x0247, 0x0247, 0x0249, 0x0249, 0x024B, 0x024B, 0x024D, 0x024D, 0x024F, 0x024F, 
	0x0250, 0x0251, 0x0252, 0x0253, 0x0254, 0x0255, 0x0256, 0x0257, 0x0258, 0x0259, 0x025A, 0x025B, 0x025C, 0x025D, 0x025E, 0x025F, 
	0x0260, 0x0261, 0x0262, 0x0263, 0x0264, 0x0265, 0x0266, 0x0267, 0x0268, 0x0269, 0x026A, 0x026B, 0x026C, 0x026D, 0x026E, 0x026F, 
	0x0270, 0x0271, 0x0272, 0x0273, 0x0274, 0x0275, 0x0276, 0x0277, 0x0278, 0x0279, 0x027A, 0x027B, 0x027C, 0x027D, 0x027E, 0x027F, 
	0x0280, 0x0281, 0x0282, 0x0283, 0x0284, 0x0285, 0x0286, 0x0287, 0x0288, 0x0289, 0x028A, 0x028B, 0x028C, 0x028D, 0x028E, 0x028F, 
	0x0290, 0x0291, 0x0292, 0x0293, 0x0294, 0x0295, 0x0296, 0x0297, 0x0298, 0x0299, 0x029A, 0x029B, 0x029C, 0x029D, 0x029E, 0x029F, 
	0x02A0, 0x02A1, 0x02A2, 0x02A3, 0x02A4, 0x02A5, 0x02A6, 0x02A7, 0x02A8, 0x02A9, 0x02AA, 0x02AB, 0x02AC, 0x02AD, 0x02AE, 0x02AF, 
	0x02B0, 0x02B1, 0x02B2, 0x02B3, 0x02B4, 0x02B5, 0x02B6, 0x02B7, 0x02B8, 0x02B9, 0x02BA, 0x02BB, 0x02BC, 0x02BD, 0x02BE, 0x02BF, 
	0x02C0, 0x02C1, 0x02C2, 0x02C3, 0x02C4, 0x02C5, 0x02C6, 0x02C7, 0x02C8, 0x02C9, 0x02CA, 0x02CB, 0x02CC, 0x02CD, 0x02CE, 0x02CF, 
	0x02D0, 0x02D1, 0x02D2, 0x02D3, 0x02D4, 0x02D5, 0x02D6, 0x02D7, 0x02D8, 0x02D9, 0x02DA, 0x02DB, 0x02DC, 0x02DD, 0x02DE, 0x02DF, 
	0x02E0, 0x02E1, 0x02E2, 0x02E3, 0x02E4, 0x02E5, 0x02E6, 0x02E7, 0x02E8, 0x02E9, 0x02EA, 0x02EB, 0x02EC, 0x02ED, 0x02EE, 0x02EF, 
	0x02F0, 0x02F1, 0x02F2, 0x02F3, 0x02F4, 0x02F5, 0x02F6, 0x02F7, 0x02F8, 0x02F9, 0x02FA, 0x02FB, 0x02FC, 0x02FD, 0x02FE, 0x02FF, 
	0x0300, 0x0301, 0x0302, 0x0303, 0x0304, 0x0305, 0x0306, 0x0307, 0x0308, 0x0309, 0x030A, 0x030B, 0x030C, 0x030D, 0x030E, 0x030F, 
	0x0310, 0x0311, 0x0312, 0x0313, 0x0314, 0x0315, 0x0316, 0x0317, 0x0318, 0x0319, 0x031A, 0x031B, 0x031C, 0x031D, 0x031E, 0x031F, 
	0x0320, 0x0321, 0x0322, 0x0323, 0x0324, 0x0325, 0x0326, 0x0327, 0x0328, 0x0329, 0x032A, 0x032B, 0x032C, 0x032D, 0x032E, 0x032F, 
	0x0330, 0x0331, 0x0332, 0x0333, 0x0334, 0x0335, 0x0336, 0x0337, 0x0338, 0x0339, 0x033A, 0x033B, 0x033C, 0x033D, 0x033E, 0x033F, 
	0x0340, 0x0341, 0x0342, 0x0343, 0x0344, 0x03B9, 0x0346, 0x0347, 0x0348, 0x0349, 0x034A, 0x034B, 0x034C, 0x034D, 0x034E, 0x034F, 
	0x0350, 0x0351, 0x0352, 0x0353, 0x0354, 0x0355, 0x0356, 0x0357, 0x0358, 0x0359, 0x035A, 0x035B, 0x035C, 0x035D, 0x035E, 0x035F, 
	0x0360, 0x0361, 0x0362, 0x0363, 0x0364, 0x0365, 0x0366, 0x0367, 0x0368, 0x0369, 0x036A, 0x036B, 0x036C, 0x036D, 0x036E, 0x036F, 
	0x0371, 0x0371, 0x0373, 0x0373, 0x0374, 0x0375, 0x0377, 0x0377, 0x0378, 0x0379, 0x037A, 0x037B, 0x037C, 0x037D, 0x037E, 0x037F, 
	0x0380, 0x0381, 0x0382, 0x0383, 0x0384, 0x0385, 0x03AC, 0x0387, 0x03AD, 0x03AE, 0x03AF, 0x038B, 0x03CC, 0x038D, 0x03CD, 0x03CE, 
	0x0390, 0x03B1, 0x03B2, 0x03B3, 0x03B4, 0x03B5, 0x03B6, 0x03B7, 0x03B8, 0x03B9, 0x03BA, 0x03BB, 0x03BC, 0x03BD, 0x03BE, 0x03BF, 
	0x03C0, 0x03C1, 0x03A2, 0x03C3, 0x03C4, 0x03C5, 0x03C6, 0x03C7, 0x03C8, 0x03C9, 0x03CA, 0x03CB, 0x03AC, 0x03AD, 0x03AE, 0x03AF, 
	0x03B0, 0x03B1, 0x03B2, 0x03B3, 0x03B4, 0x03B5, 0x03B6, 0x03B7, 0x03B8, 0x03B9, 0x03BA, 0x03BB, 0x03BC, 0x03BD, 0x03BE, 0x03BF, 
	0x03C0, 0x03C1, 0x03C3, 0x03C3, 0x03C4, 0x03C5, 0x03C6, 0x03C7, 0x03C8, 0x03C9, 0x03CA, 0x03CB, 0x03CC, 0x03CD, 0x03CE, 0x03D7, 
	0x03B2, 0x03B8, 0x03D2, 0x03D3, 0x03D4, 0x03C6, 0x03C0, 0x03D7, 0x03D9, 0x03D9, 0x03DB, 0x03DB, 0x03DD, 0x03DD, 0x03DF, 0x03DF, 
	0x03E1, 0x03E1, 0x03E3, 0x03E3, 0x03E5, 0x03E5, 0x03E7, 0x03E7, 0x03E9, 0x03E9, 0x03EB, 0x03EB, 0x03ED, 0x03ED, 0x03EF, 0x03EF, 
	0x03BA, 0x03C1, 0x03F2, 0x03F3, 0x03B8, 0x03B5, 0x03F6, 0x03F8, 0x03F8, 0x03F2, 0x03FB, 0x03FB, 0x03FC, 0x037B, 0x037C, 0x037D
	
};

struct UStruct {
	unsigned short a;
	unsigned short b;
};

static UStruct uData[690]={
	{ 0x0400, 0x0450 }, { 0x0401, 0x0451 }, { 0x0402, 0x0452 }, { 0x0403, 0x0453 }, { 0x0404, 0x0454 }, { 0x0405, 0x0455 }, { 0x0406, 0x0456 }, 
	{ 0x0407, 0x0457 }, { 0x0408, 0x0458 }, { 0x0409, 0x0459 }, { 0x040A, 0x045A }, { 0x040B, 0x045B }, { 0x040C, 0x045C }, { 0x040D, 0x045D }, 
	{ 0x040E, 0x045E }, { 0x040F, 0x045F }, { 0x0410, 0x0430 }, { 0x0411, 0x0431 }, { 0x0412, 0x0432 }, { 0x0413, 0x0433 }, { 0x0414, 0x0434 }, 
	{ 0x0415, 0x0435 }, { 0x0416, 0x0436 }, { 0x0417, 0x0437 }, { 0x0418, 0x0438 }, { 0x0419, 0x0439 }, { 0x041A, 0x043A }, { 0x041B, 0x043B }, 
	{ 0x041C, 0x043C }, { 0x041D, 0x043D }, { 0x041E, 0x043E }, { 0x041F, 0x043F }, { 0x0420, 0x0440 }, { 0x0421, 0x0441 }, { 0x0422, 0x0442 }, 
	{ 0x0423, 0x0443 }, { 0x0424, 0x0444 }, { 0x0425, 0x0445 }, { 0x0426, 0x0446 }, { 0x0427, 0x0447 }, { 0x0428, 0x0448 }, { 0x0429, 0x0449 }, 
	{ 0x042A, 0x044A }, { 0x042B, 0x044B }, { 0x042C, 0x044C }, { 0x042D, 0x044D }, { 0x042E, 0x044E }, { 0x042F, 0x044F }, { 0x0460, 0x0461 }, 
	{ 0x0462, 0x0463 }, { 0x0464, 0x0465 }, { 0x0466, 0x0467 }, { 0x0468, 0x0469 }, { 0x046A, 0x046B }, { 0x046C, 0x046D }, { 0x046E, 0x046F }, 
	{ 0x0470, 0x0471 }, { 0x0472, 0x0473 }, { 0x0474, 0x0475 }, { 0x0476, 0x0477 }, { 0x0478, 0x0479 }, { 0x047A, 0x047B }, { 0x047C, 0x047D }, 
	{ 0x047E, 0x047F }, { 0x0480, 0x0481 }, { 0x048A, 0x048B }, { 0x048C, 0x048D }, { 0x048E, 0x048F }, { 0x0490, 0x0491 }, { 0x0492, 0x0493 }, 
	{ 0x0494, 0x0495 }, { 0x0496, 0x0497 }, { 0x0498, 0x0499 }, { 0x049A, 0x049B }, { 0x049C, 0x049D }, { 0x049E, 0x049F }, { 0x04A0, 0x04A1 }, 
	{ 0x04A2, 0x04A3 }, { 0x04A4, 0x04A5 }, { 0x04A6, 0x04A7 }, { 0x04A8, 0x04A9 }, { 0x04AA, 0x04AB }, { 0x04AC, 0x04AD }, { 0x04AE, 0x04AF }, 
	{ 0x04B0, 0x04B1 }, { 0x04B2, 0x04B3 }, { 0x04B4, 0x04B5 }, { 0x04B6, 0x04B7 }, { 0x04B8, 0x04B9 }, { 0x04BA, 0x04BB }, { 0x04BC, 0x04BD }, 
	{ 0x04BE, 0x04BF }, { 0x04C0, 0x04CF }, { 0x04C1, 0x04C2 }, { 0x04C3, 0x04C4 }, { 0x04C5, 0x04C6 }, { 0x04C7, 0x04C8 }, { 0x04C9, 0x04CA }, 
	{ 0x04CB, 0x04CC }, { 0x04CD, 0x04CE }, { 0x04D0, 0x04D1 }, { 0x04D2, 0x04D3 }, { 0x04D4, 0x04D5 }, { 0x04D6, 0x04D7 }, { 0x04D8, 0x04D9 }, 
	{ 0x04DA, 0x04DB }, { 0x04DC, 0x04DD }, { 0x04DE, 0x04DF }, { 0x04E0, 0x04E1 }, { 0x04E2, 0x04E3 }, { 0x04E4, 0x04E5 }, { 0x04E6, 0x04E7 }, 
	{ 0x04E8, 0x04E9 }, { 0x04EA, 0x04EB }, { 0x04EC, 0x04ED }, { 0x04EE, 0x04EF }, { 0x04F0, 0x04F1 }, { 0x04F2, 0x04F3 }, { 0x04F4, 0x04F5 }, 
	{ 0x04F6, 0x04F7 }, { 0x04F8, 0x04F9 }, { 0x04FA, 0x04FB }, { 0x04FC, 0x04FD }, { 0x04FE, 0x04FF }, { 0x0500, 0x0501 }, { 0x0502, 0x0503 }, 
	{ 0x0504, 0x0505 }, { 0x0506, 0x0507 }, { 0x0508, 0x0509 }, { 0x050A, 0x050B }, { 0x050C, 0x050D }, { 0x050E, 0x050F }, { 0x0510, 0x0511 }, 
	{ 0x0512, 0x0513 }, { 0x0514, 0x0515 }, { 0x0516, 0x0517 }, { 0x0518, 0x0519 }, { 0x051A, 0x051B }, { 0x051C, 0x051D }, { 0x051E, 0x051F }, 
	{ 0x0520, 0x0521 }, { 0x0522, 0x0523 }, { 0x0524, 0x0525 }, { 0x0526, 0x0527 }, { 0x0531, 0x0561 }, { 0x0532, 0x0562 }, { 0x0533, 0x0563 }, 
	{ 0x0534, 0x0564 }, { 0x0535, 0x0565 }, { 0x0536, 0x0566 }, { 0x0537, 0x0567 }, { 0x0538, 0x0568 }, { 0x0539, 0x0569 }, { 0x053A, 0x056A }, 
	{ 0x053B, 0x056B }, { 0x053C, 0x056C }, { 0x053D, 0x056D }, { 0x053E, 0x056E }, { 0x053F, 0x056F }, { 0x0540, 0x0570 }, { 0x0541, 0x0571 }, 
	{ 0x0542, 0x0572 }, { 0x0543, 0x0573 }, { 0x0544, 0x0574 }, { 0x0545, 0x0575 }, { 0x0546, 0x0576 }, { 0x0547, 0x0577 }, { 0x0548, 0x0578 }, 
	{ 0x0549, 0x0579 }, { 0x054A, 0x057A }, { 0x054B, 0x057B }, { 0x054C, 0x057C }, { 0x054D, 0x057D }, { 0x054E, 0x057E }, { 0x054F, 0x057F }, 
	{ 0x0550, 0x0580 }, { 0x0551, 0x0581 }, { 0x0552, 0x0582 }, { 0x0553, 0x0583 }, { 0x0554, 0x0584 }, { 0x0555, 0x0585 }, { 0x0556, 0x0586 }, 
	{ 0x10A0, 0x2D00 }, { 0x10A1, 0x2D01 }, { 0x10A2, 0x2D02 }, { 0x10A3, 0x2D03 }, { 0x10A4, 0x2D04 }, { 0x10A5, 0x2D05 }, { 0x10A6, 0x2D06 }, 
	{ 0x10A7, 0x2D07 }, { 0x10A8, 0x2D08 }, { 0x10A9, 0x2D09 }, { 0x10AA, 0x2D0A }, { 0x10AB, 0x2D0B }, { 0x10AC, 0x2D0C }, { 0x10AD, 0x2D0D }, 
	{ 0x10AE, 0x2D0E }, { 0x10AF, 0x2D0F }, { 0x10B0, 0x2D10 }, { 0x10B1, 0x2D11 }, { 0x10B2, 0x2D12 }, { 0x10B3, 0x2D13 }, { 0x10B4, 0x2D14 }, 
	{ 0x10B5, 0x2D15 }, { 0x10B6, 0x2D16 }, { 0x10B7, 0x2D17 }, { 0x10B8, 0x2D18 }, { 0x10B9, 0x2D19 }, { 0x10BA, 0x2D1A }, { 0x10BB, 0x2D1B }, 
	{ 0x10BC, 0x2D1C }, { 0x10BD, 0x2D1D }, { 0x10BE, 0x2D1E }, { 0x10BF, 0x2D1F }, { 0x10C0, 0x2D20 }, { 0x10C1, 0x2D21 }, { 0x10C2, 0x2D22 }, 
	{ 0x10C3, 0x2D23 }, { 0x10C4, 0x2D24 }, { 0x10C5, 0x2D25 }, { 0x1E00, 0x1E01 }, { 0x1E02, 0x1E03 }, { 0x1E04, 0x1E05 }, { 0x1E06, 0x1E07 }, 
	{ 0x1E08, 0x1E09 }, { 0x1E0A, 0x1E0B }, { 0x1E0C, 0x1E0D }, { 0x1E0E, 0x1E0F }, { 0x1E10, 0x1E11 }, { 0x1E12, 0x1E13 }, { 0x1E14, 0x1E15 }, 
	{ 0x1E16, 0x1E17 }, { 0x1E18, 0x1E19 }, { 0x1E1A, 0x1E1B }, { 0x1E1C, 0x1E1D }, { 0x1E1E, 0x1E1F }, { 0x1E20, 0x1E21 }, { 0x1E22, 0x1E23 }, 
	{ 0x1E24, 0x1E25 }, { 0x1E26, 0x1E27 }, { 0x1E28, 0x1E29 }, { 0x1E2A, 0x1E2B }, { 0x1E2C, 0x1E2D }, { 0x1E2E, 0x1E2F }, { 0x1E30, 0x1E31 }, 
	{ 0x1E32, 0x1E33 }, { 0x1E34, 0x1E35 }, { 0x1E36, 0x1E37 }, { 0x1E38, 0x1E39 }, { 0x1E3A, 0x1E3B }, { 0x1E3C, 0x1E3D }, { 0x1E3E, 0x1E3F }, 
	{ 0x1E40, 0x1E41 }, { 0x1E42, 0x1E43 }, { 0x1E44, 0x1E45 }, { 0x1E46, 0x1E47 }, { 0x1E48, 0x1E49 }, { 0x1E4A, 0x1E4B }, { 0x1E4C, 0x1E4D }, 
	{ 0x1E4E, 0x1E4F }, { 0x1E50, 0x1E51 }, { 0x1E52, 0x1E53 }, { 0x1E54, 0x1E55 }, { 0x1E56, 0x1E57 }, { 0x1E58, 0x1E59 }, { 0x1E5A, 0x1E5B }, 
	{ 0x1E5C, 0x1E5D }, { 0x1E5E, 0x1E5F }, { 0x1E60, 0x1E61 }, { 0x1E62, 0x1E63 }, { 0x1E64, 0x1E65 }, { 0x1E66, 0x1E67 }, { 0x1E68, 0x1E69 }, 
	{ 0x1E6A, 0x1E6B }, { 0x1E6C, 0x1E6D }, { 0x1E6E, 0x1E6F }, { 0x1E70, 0x1E71 }, { 0x1E72, 0x1E73 }, { 0x1E74, 0x1E75 }, { 0x1E76, 0x1E77 }, 
	{ 0x1E78, 0x1E79 }, { 0x1E7A, 0x1E7B }, { 0x1E7C, 0x1E7D }, { 0x1E7E, 0x1E7F }, { 0x1E80, 0x1E81 }, { 0x1E82, 0x1E83 }, { 0x1E84, 0x1E85 }, 
	{ 0x1E86, 0x1E87 }, { 0x1E88, 0x1E89 }, { 0x1E8A, 0x1E8B }, { 0x1E8C, 0x1E8D }, { 0x1E8E, 0x1E8F }, { 0x1E90, 0x1E91 }, { 0x1E92, 0x1E93 }, 
	{ 0x1E94, 0x1E95 }, { 0x1E9B, 0x1E61 }, { 0x1EA0, 0x1EA1 }, { 0x1EA2, 0x1EA3 }, { 0x1EA4, 0x1EA5 }, { 0x1EA6, 0x1EA7 }, { 0x1EA8, 0x1EA9 }, 
	{ 0x1EAA, 0x1EAB }, { 0x1EAC, 0x1EAD }, { 0x1EAE, 0x1EAF }, { 0x1EB0, 0x1EB1 }, { 0x1EB2, 0x1EB3 }, { 0x1EB4, 0x1EB5 }, { 0x1EB6, 0x1EB7 }, 
	{ 0x1EB8, 0x1EB9 }, { 0x1EBA, 0x1EBB }, { 0x1EBC, 0x1EBD }, { 0x1EBE, 0x1EBF }, { 0x1EC0, 0x1EC1 }, { 0x1EC2, 0x1EC3 }, { 0x1EC4, 0x1EC5 }, 
	{ 0x1EC6, 0x1EC7 }, { 0x1EC8, 0x1EC9 }, { 0x1ECA, 0x1ECB }, { 0x1ECC, 0x1ECD }, { 0x1ECE, 0x1ECF }, { 0x1ED0, 0x1ED1 }, { 0x1ED2, 0x1ED3 }, 
	{ 0x1ED4, 0x1ED5 }, { 0x1ED6, 0x1ED7 }, { 0x1ED8, 0x1ED9 }, { 0x1EDA, 0x1EDB }, { 0x1EDC, 0x1EDD }, { 0x1EDE, 0x1EDF }, { 0x1EE0, 0x1EE1 }, 
	{ 0x1EE2, 0x1EE3 }, { 0x1EE4, 0x1EE5 }, { 0x1EE6, 0x1EE7 }, { 0x1EE8, 0x1EE9 }, { 0x1EEA, 0x1EEB }, { 0x1EEC, 0x1EED }, { 0x1EEE, 0x1EEF }, 
	{ 0x1EF0, 0x1EF1 }, { 0x1EF2, 0x1EF3 }, { 0x1EF4, 0x1EF5 }, { 0x1EF6, 0x1EF7 }, { 0x1EF8, 0x1EF9 }, { 0x1EFA, 0x1EFB }, { 0x1EFC, 0x1EFD }, 
	{ 0x1EFE, 0x1EFF }, { 0x1F08, 0x1F00 }, { 0x1F09, 0x1F01 }, { 0x1F0A, 0x1F02 }, { 0x1F0B, 0x1F03 }, { 0x1F0C, 0x1F04 }, { 0x1F0D, 0x1F05 }, 
	{ 0x1F0E, 0x1F06 }, { 0x1F0F, 0x1F07 }, { 0x1F18, 0x1F10 }, { 0x1F19, 0x1F11 }, { 0x1F1A, 0x1F12 }, { 0x1F1B, 0x1F13 }, { 0x1F1C, 0x1F14 }, 
	{ 0x1F1D, 0x1F15 }, { 0x1F28, 0x1F20 }, { 0x1F29, 0x1F21 }, { 0x1F2A, 0x1F22 }, { 0x1F2B, 0x1F23 }, { 0x1F2C, 0x1F24 }, { 0x1F2D, 0x1F25 }, 
	{ 0x1F2E, 0x1F26 }, { 0x1F2F, 0x1F27 }, { 0x1F38, 0x1F30 }, { 0x1F39, 0x1F31 }, { 0x1F3A, 0x1F32 }, { 0x1F3B, 0x1F33 }, { 0x1F3C, 0x1F34 }, 
	{ 0x1F3D, 0x1F35 }, { 0x1F3E, 0x1F36 }, { 0x1F3F, 0x1F37 }, { 0x1F48, 0x1F40 }, { 0x1F49, 0x1F41 }, { 0x1F4A, 0x1F42 }, { 0x1F4B, 0x1F43 }, 
	{ 0x1F4C, 0x1F44 }, { 0x1F4D, 0x1F45 }, { 0x1F59, 0x1F51 }, { 0x1F5B, 0x1F53 }, { 0x1F5D, 0x1F55 }, { 0x1F5F, 0x1F57 }, { 0x1F68, 0x1F60 }, 
	{ 0x1F69, 0x1F61 }, { 0x1F6A, 0x1F62 }, { 0x1F6B, 0x1F63 }, { 0x1F6C, 0x1F64 }, { 0x1F6D, 0x1F65 }, { 0x1F6E, 0x1F66 }, { 0x1F6F, 0x1F67 }, 
	{ 0x1FB8, 0x1FB0 }, { 0x1FB9, 0x1FB1 }, { 0x1FBA, 0x1F70 }, { 0x1FBB, 0x1F71 }, { 0x1FBE, 0x03B9 }, { 0x1FC8, 0x1F72 }, { 0x1FC9, 0x1F73 }, 
	{ 0x1FCA, 0x1F74 }, { 0x1FCB, 0x1F75 }, { 0x1FD8, 0x1FD0 }, { 0x1FD9, 0x1FD1 }, { 0x1FDA, 0x1F76 }, { 0x1FDB, 0x1F77 }, { 0x1FE8, 0x1FE0 }, 
	{ 0x1FE9, 0x1FE1 }, { 0x1FEA, 0x1F7A }, { 0x1FEB, 0x1F7B }, { 0x1FEC, 0x1FE5 }, { 0x1FF8, 0x1F78 }, { 0x1FF9, 0x1F79 }, { 0x1FFA, 0x1F7C }, 
	{ 0x1FFB, 0x1F7D }, { 0x2126, 0x03C9 }, { 0x212A, 0x006B }, { 0x212B, 0x00E5 }, { 0x2132, 0x214E }, { 0x2160, 0x2170 }, { 0x2161, 0x2171 }, 
	{ 0x2162, 0x2172 }, { 0x2163, 0x2173 }, { 0x2164, 0x2174 }, { 0x2165, 0x2175 }, { 0x2166, 0x2176 }, { 0x2167, 0x2177 }, { 0x2168, 0x2178 }, 
	{ 0x2169, 0x2179 }, { 0x216A, 0x217A }, { 0x216B, 0x217B }, { 0x216C, 0x217C }, { 0x216D, 0x217D }, { 0x216E, 0x217E }, { 0x216F, 0x217F }, 
	{ 0x2183, 0x2184 }, { 0x24B6, 0x24D0 }, { 0x24B7, 0x24D1 }, { 0x24B8, 0x24D2 }, { 0x24B9, 0x24D3 }, { 0x24BA, 0x24D4 }, { 0x24BB, 0x24D5 }, 
	{ 0x24BC, 0x24D6 }, { 0x24BD, 0x24D7 }, { 0x24BE, 0x24D8 }, { 0x24BF, 0x24D9 }, { 0x24C0, 0x24DA }, { 0x24C1, 0x24DB }, { 0x24C2, 0x24DC }, 
	{ 0x24C3, 0x24DD }, { 0x24C4, 0x24DE }, { 0x24C5, 0x24DF }, { 0x24C6, 0x24E0 }, { 0x24C7, 0x24E1 }, { 0x24C8, 0x24E2 }, { 0x24C9, 0x24E3 }, 
	{ 0x24CA, 0x24E4 }, { 0x24CB, 0x24E5 }, { 0x24CC, 0x24E6 }, { 0x24CD, 0x24E7 }, { 0x24CE, 0x24E8 }, { 0x24CF, 0x24E9 }, { 0x2C00, 0x2C30 }, 
	{ 0x2C01, 0x2C31 }, { 0x2C02, 0x2C32 }, { 0x2C03, 0x2C33 }, { 0x2C04, 0x2C34 }, { 0x2C05, 0x2C35 }, { 0x2C06, 0x2C36 }, { 0x2C07, 0x2C37 }, 
	{ 0x2C08, 0x2C38 }, { 0x2C09, 0x2C39 }, { 0x2C0A, 0x2C3A }, { 0x2C0B, 0x2C3B }, { 0x2C0C, 0x2C3C }, { 0x2C0D, 0x2C3D }, { 0x2C0E, 0x2C3E }, 
	{ 0x2C0F, 0x2C3F }, { 0x2C10, 0x2C40 }, { 0x2C11, 0x2C41 }, { 0x2C12, 0x2C42 }, { 0x2C13, 0x2C43 }, { 0x2C14, 0x2C44 }, { 0x2C15, 0x2C45 }, 
	{ 0x2C16, 0x2C46 }, { 0x2C17, 0x2C47 }, { 0x2C18, 0x2C48 }, { 0x2C19, 0x2C49 }, { 0x2C1A, 0x2C4A }, { 0x2C1B, 0x2C4B }, { 0x2C1C, 0x2C4C }, 
	{ 0x2C1D, 0x2C4D }, { 0x2C1E, 0x2C4E }, { 0x2C1F, 0x2C4F }, { 0x2C20, 0x2C50 }, { 0x2C21, 0x2C51 }, { 0x2C22, 0x2C52 }, { 0x2C23, 0x2C53 }, 
	{ 0x2C24, 0x2C54 }, { 0x2C25, 0x2C55 }, { 0x2C26, 0x2C56 }, { 0x2C27, 0x2C57 }, { 0x2C28, 0x2C58 }, { 0x2C29, 0x2C59 }, { 0x2C2A, 0x2C5A }, 
	{ 0x2C2B, 0x2C5B }, { 0x2C2C, 0x2C5C }, { 0x2C2D, 0x2C5D }, { 0x2C2E, 0x2C5E }, { 0x2C60, 0x2C61 }, { 0x2C62, 0x026B }, { 0x2C63, 0x1D7D }, 
	{ 0x2C64, 0x027D }, { 0x2C67, 0x2C68 }, { 0x2C69, 0x2C6A }, { 0x2C6B, 0x2C6C }, { 0x2C6D, 0x0251 }, { 0x2C6E, 0x0271 }, { 0x2C6F, 0x0250 }, 
	{ 0x2C70, 0x0252 }, { 0x2C72, 0x2C73 }, { 0x2C75, 0x2C76 }, { 0x2C7E, 0x023F }, { 0x2C7F, 0x0240 }, { 0x2C80, 0x2C81 }, { 0x2C82, 0x2C83 }, 
	{ 0x2C84, 0x2C85 }, { 0x2C86, 0x2C87 }, { 0x2C88, 0x2C89 }, { 0x2C8A, 0x2C8B }, { 0x2C8C, 0x2C8D }, { 0x2C8E, 0x2C8F }, { 0x2C90, 0x2C91 }, 
	{ 0x2C92, 0x2C93 }, { 0x2C94, 0x2C95 }, { 0x2C96, 0x2C97 }, { 0x2C98, 0x2C99 }, { 0x2C9A, 0x2C9B }, { 0x2C9C, 0x2C9D }, { 0x2C9E, 0x2C9F }, 
	{ 0x2CA0, 0x2CA1 }, { 0x2CA2, 0x2CA3 }, { 0x2CA4, 0x2CA5 }, { 0x2CA6, 0x2CA7 }, { 0x2CA8, 0x2CA9 }, { 0x2CAA, 0x2CAB }, { 0x2CAC, 0x2CAD }, 
	{ 0x2CAE, 0x2CAF }, { 0x2CB0, 0x2CB1 }, { 0x2CB2, 0x2CB3 }, { 0x2CB4, 0x2CB5 }, { 0x2CB6, 0x2CB7 }, { 0x2CB8, 0x2CB9 }, { 0x2CBA, 0x2CBB }, 
	{ 0x2CBC, 0x2CBD }, { 0x2CBE, 0x2CBF }, { 0x2CC0, 0x2CC1 }, { 0x2CC2, 0x2CC3 }, { 0x2CC4, 0x2CC5 }, { 0x2CC6, 0x2CC7 }, { 0x2CC8, 0x2CC9 }, 
	{ 0x2CCA, 0x2CCB }, { 0x2CCC, 0x2CCD }, { 0x2CCE, 0x2CCF }, { 0x2CD0, 0x2CD1 }, { 0x2CD2, 0x2CD3 }, { 0x2CD4, 0x2CD5 }, { 0x2CD6, 0x2CD7 }, 
	{ 0x2CD8, 0x2CD9 }, { 0x2CDA, 0x2CDB }, { 0x2CDC, 0x2CDD }, { 0x2CDE, 0x2CDF }, { 0x2CE0, 0x2CE1 }, { 0x2CE2, 0x2CE3 }, { 0x2CEB, 0x2CEC }, 
	{ 0x2CED, 0x2CEE }, { 0xA640, 0xA641 }, { 0xA642, 0xA643 }, { 0xA644, 0xA645 }, { 0xA646, 0xA647 }, { 0xA648, 0xA649 }, { 0xA64A, 0xA64B }, 
	{ 0xA64C, 0xA64D }, { 0xA64E, 0xA64F }, { 0xA650, 0xA651 }, { 0xA652, 0xA653 }, { 0xA654, 0xA655 }, { 0xA656, 0xA657 }, { 0xA658, 0xA659 }, 
	{ 0xA65A, 0xA65B }, { 0xA65C, 0xA65D }, { 0xA65E, 0xA65F }, { 0xA660, 0xA661 }, { 0xA662, 0xA663 }, { 0xA664, 0xA665 }, { 0xA666, 0xA667 }, 
	{ 0xA668, 0xA669 }, { 0xA66A, 0xA66B }, { 0xA66C, 0xA66D }, { 0xA680, 0xA681 }, { 0xA682, 0xA683 }, { 0xA684, 0xA685 }, { 0xA686, 0xA687 }, 
	{ 0xA688, 0xA689 }, { 0xA68A, 0xA68B }, { 0xA68C, 0xA68D }, { 0xA68E, 0xA68F }, { 0xA690, 0xA691 }, { 0xA692, 0xA693 }, { 0xA694, 0xA695 }, 
	{ 0xA696, 0xA697 }, { 0xA722, 0xA723 }, { 0xA724, 0xA725 }, { 0xA726, 0xA727 }, { 0xA728, 0xA729 }, { 0xA72A, 0xA72B }, { 0xA72C, 0xA72D }, 
	{ 0xA72E, 0xA72F }, { 0xA732, 0xA733 }, { 0xA734, 0xA735 }, { 0xA736, 0xA737 }, { 0xA738, 0xA739 }, { 0xA73A, 0xA73B }, { 0xA73C, 0xA73D }, 
	{ 0xA73E, 0xA73F }, { 0xA740, 0xA741 }, { 0xA742, 0xA743 }, { 0xA744, 0xA745 }, { 0xA746, 0xA747 }, { 0xA748, 0xA749 }, { 0xA74A, 0xA74B }, 
	{ 0xA74C, 0xA74D }, { 0xA74E, 0xA74F }, { 0xA750, 0xA751 }, { 0xA752, 0xA753 }, { 0xA754, 0xA755 }, { 0xA756, 0xA757 }, { 0xA758, 0xA759 }, 
	{ 0xA75A, 0xA75B }, { 0xA75C, 0xA75D }, { 0xA75E, 0xA75F }, { 0xA760, 0xA761 }, { 0xA762, 0xA763 }, { 0xA764, 0xA765 }, { 0xA766, 0xA767 }, 
	{ 0xA768, 0xA769 }, { 0xA76A, 0xA76B }, { 0xA76C, 0xA76D }, { 0xA76E, 0xA76F }, { 0xA779, 0xA77A }, { 0xA77B, 0xA77C }, { 0xA77D, 0x1D79 }, 
	{ 0xA77E, 0xA77F }, { 0xA780, 0xA781 }, { 0xA782, 0xA783 }, { 0xA784, 0xA785 }, { 0xA786, 0xA787 }, { 0xA78B, 0xA78C }, { 0xA78D, 0x0265 }, 
	{ 0xA790, 0xA791 }, { 0xA7A0, 0xA7A1 }, { 0xA7A2, 0xA7A3 }, { 0xA7A4, 0xA7A5 }, { 0xA7A6, 0xA7A7 }, { 0xA7A8, 0xA7A9 }, { 0xFF21, 0xFF41 }, 
	{ 0xFF22, 0xFF42 }, { 0xFF23, 0xFF43 }, { 0xFF24, 0xFF44 }, { 0xFF25, 0xFF45 }, { 0xFF26, 0xFF46 }, { 0xFF27, 0xFF47 }, { 0xFF28, 0xFF48 }, 
	{ 0xFF29, 0xFF49 }, { 0xFF2A, 0xFF4A }, { 0xFF2B, 0xFF4B }, { 0xFF2C, 0xFF4C }, { 0xFF2D, 0xFF4D }, { 0xFF2E, 0xFF4E }, { 0xFF2F, 0xFF4F }, 
	{ 0xFF30, 0xFF50 }, { 0xFF31, 0xFF51 }, { 0xFF32, 0xFF52 }, { 0xFF33, 0xFF53 }, { 0xFF34, 0xFF54 }, { 0xFF35, 0xFF55 }, { 0xFF36, 0xFF56 }, 
	{ 0xFF37, 0xFF57 }, { 0xFF38, 0xFF58 }, { 0xFF39, 0xFF59 }, { 0xFF3A, 0xFF5A }
};


unsigned  UnicodeLC(unsigned ch)
{
	if (ch<1024) return tab1024[ch];

	if (ch <= 0xFFFF) {
		int L = 0, R = 690;
		while (L < R) 
		{
			int i = (L+R)/2;
			if (ch<=uData[i].a) R=i; else L=i+1;
		}
		return uData[R].a == ch ? uData[R].b : ch;
	}

	return ch>=0x10400 && ch<= 0x10427 ? ch+40 : ch;
}

//косячные таблицы
static unsigned short tab1024UC[1024]={
	0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x000E, 0x000F, 
	0x0010, 0x0011, 0x0012, 0x0013, 0x0014, 0x0015, 0x0016, 0x0017, 0x0018, 0x0019, 0x001A, 0x001B, 0x001C, 0x001D, 0x001E, 0x001F, 
	0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027, 0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x002E, 0x002F, 
	0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037, 0x0038, 0x0039, 0x003A, 0x003B, 0x003C, 0x003D, 0x003E, 0x003F, 
	0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047, 0x0048, 0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F, 
	0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057, 0x0058, 0x0059, 0x005A, 0x005B, 0x005C, 0x005D, 0x005E, 0x005F, 
	0x0060, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047, 0x0048, 0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F, 
	0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057, 0x0058, 0x0059, 0x005A, 0x007B, 0x007C, 0x007D, 0x007E, 0x007F, 
	0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087, 0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F, 
	0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097, 0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F, 
	0x00A0, 0x00A1, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7, 0x00A8, 0x00A9, 0x00AA, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF, 
	0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7, 0x00B8, 0x00B9, 0x00BA, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00BF, 
	0x00C0, 0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x00C5, 0x00C6, 0x00C7, 0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x00CC, 0x00CD, 0x00CE, 0x00CF, 
	0x00D0, 0x00D1, 0x00D2, 0x00D3, 0x00D4, 0x00D5, 0x00D6, 0x00D7, 0x00D8, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x00DD, 0x00DE, 0x00DF, 
	0x00C0, 0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x212B, 0x00C6, 0x00C7, 0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x00CC, 0x00CD, 0x00CE, 0x00CF, 
	0x00D0, 0x00D1, 0x00D2, 0x00D3, 0x00D4, 0x00D5, 0x00D6, 0x00F7, 0x00D8, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x00DD, 0x00DE, 0x0178, 
	0x0100, 0x0100, 0x0102, 0x0102, 0x0104, 0x0104, 0x0106, 0x0106, 0x0108, 0x0108, 0x010A, 0x010A, 0x010C, 0x010C, 0x010E, 0x010E, 
	0x0110, 0x0110, 0x0112, 0x0112, 0x0114, 0x0114, 0x0116, 0x0116, 0x0118, 0x0118, 0x011A, 0x011A, 0x011C, 0x011C, 0x011E, 0x011E, 
	0x0120, 0x0120, 0x0122, 0x0122, 0x0124, 0x0124, 0x0126, 0x0126, 0x0128, 0x0128, 0x012A, 0x012A, 0x012C, 0x012C, 0x012E, 0x012E, 
	0x0130, 0x0131, 0x0132, 0x0132, 0x0134, 0x0134, 0x0136, 0x0136, 0x0138, 0x0139, 0x0139, 0x013B, 0x013B, 0x013D, 0x013D, 0x013F, 
	0x013F, 0x0141, 0x0141, 0x0143, 0x0143, 0x0145, 0x0145, 0x0147, 0x0147, 0x0149, 0x014A, 0x014A, 0x014C, 0x014C, 0x014E, 0x014E, 
	0x0150, 0x0150, 0x0152, 0x0152, 0x0154, 0x0154, 0x0156, 0x0156, 0x0158, 0x0158, 0x015A, 0x015A, 0x015C, 0x015C, 0x015E, 0x015E, 
	0x0160, 0x0160, 0x0162, 0x0162, 0x0164, 0x0164, 0x0166, 0x0166, 0x0168, 0x0168, 0x016A, 0x016A, 0x016C, 0x016C, 0x016E, 0x016E, 
	0x0170, 0x0170, 0x0172, 0x0172, 0x0174, 0x0174, 0x0176, 0x0176, 0x0178, 0x0179, 0x0179, 0x017B, 0x017B, 0x017D, 0x017D, 0x017F, 
	0x0243, 0x0181, 0x0182, 0x0182, 0x0184, 0x0184, 0x0186, 0x0187, 0x0187, 0x0189, 0x018A, 0x018B, 0x018B, 0x018D, 0x018E, 0x018F, 
	0x0190, 0x0191, 0x0191, 0x0193, 0x0194, 0x01F6, 0x0196, 0x0197, 0x0198, 0x0198, 0x023D, 0x019B, 0x019C, 0x019D, 0x0220, 0x019F, 
	0x01A0, 0x01A0, 0x01A2, 0x01A2, 0x01A4, 0x01A4, 0x01A6, 0x01A7, 0x01A7, 0x01A9, 0x01AA, 0x01AB, 0x01AC, 0x01AC, 0x01AE, 0x01AF, 
	0x01AF, 0x01B1, 0x01B2, 0x01B3, 0x01B3, 0x01B5, 0x01B5, 0x01B7, 0x01B8, 0x01B8, 0x01BA, 0x01BB, 0x01BC, 0x01BC, 0x01BE, 0x01F7, 
	0x01C0, 0x01C1, 0x01C2, 0x01C3, 0x01C4, 0x01C5, 0x01C5, 0x01C7, 0x01C8, 0x01C8, 0x01CA, 0x01CB, 0x01CB, 0x01CD, 0x01CD, 0x01CF, 
	0x01CF, 0x01D1, 0x01D1, 0x01D3, 0x01D3, 0x01D5, 0x01D5, 0x01D7, 0x01D7, 0x01D9, 0x01D9, 0x01DB, 0x01DB, 0x018E, 0x01DE, 0x01DE, 
	0x01E0, 0x01E0, 0x01E2, 0x01E2, 0x01E4, 0x01E4, 0x01E6, 0x01E6, 0x01E8, 0x01E8, 0x01EA, 0x01EA, 0x01EC, 0x01EC, 0x01EE, 0x01EE, 
	0x01F0, 0x01F1, 0x01F2, 0x01F2, 0x01F4, 0x01F4, 0x01F6, 0x01F7, 0x01F8, 0x01F8, 0x01FA, 0x01FA, 0x01FC, 0x01FC, 0x01FE, 0x01FE, 
	0x0200, 0x0200, 0x0202, 0x0202, 0x0204, 0x0204, 0x0206, 0x0206, 0x0208, 0x0208, 0x020A, 0x020A, 0x020C, 0x020C, 0x020E, 0x020E, 
	0x0210, 0x0210, 0x0212, 0x0212, 0x0214, 0x0214, 0x0216, 0x0216, 0x0218, 0x0218, 0x021A, 0x021A, 0x021C, 0x021C, 0x021E, 0x021E, 
	0x0220, 0x0221, 0x0222, 0x0222, 0x0224, 0x0224, 0x0226, 0x0226, 0x0228, 0x0228, 0x022A, 0x022A, 0x022C, 0x022C, 0x022E, 0x022E, 
	0x0230, 0x0230, 0x0232, 0x0232, 0x0234, 0x0235, 0x0236, 0x0237, 0x0238, 0x0239, 0x023A, 0x023B, 0x023B, 0x023D, 0x023E, 0x2C7E, 
	0x2C7F, 0x0241, 0x0241, 0x0243, 0x0244, 0x0245, 0x0246, 0x0246, 0x0248, 0x0248, 0x024A, 0x024A, 0x024C, 0x024C, 0x024E, 0x024E, 
	0x2C6F, 0x2C6D, 0x2C70, 0x0181, 0x0186, 0x0255, 0x0189, 0x018A, 0x0258, 0x018F, 0x025A, 0x0190, 0x025C, 0x025D, 0x025E, 0x025F, 
	0x0193, 0x0261, 0x0262, 0x0194, 0x0264, 0xA78D, 0x0266, 0x0267, 0x0197, 0x0196, 0x026A, 0x2C62, 0x026C, 0x026D, 0x026E, 0x019C, 
	0x0270, 0x2C6E, 0x019D, 0x0273, 0x0274, 0x019F, 0x0276, 0x0277, 0x0278, 0x0279, 0x027A, 0x027B, 0x027C, 0x2C64, 0x027E, 0x027F, 
	0x01A6, 0x0281, 0x0282, 0x01A9, 0x0284, 0x0285, 0x0286, 0x0287, 0x01AE, 0x0244, 0x01B1, 0x01B2, 0x0245, 0x028D, 0x028E, 0x028F, 
	0x0290, 0x0291, 0x01B7, 0x0293, 0x0294, 0x0295, 0x0296, 0x0297, 0x0298, 0x0299, 0x029A, 0x029B, 0x029C, 0x029D, 0x029E, 0x029F, 
	0x02A0, 0x02A1, 0x02A2, 0x02A3, 0x02A4, 0x02A5, 0x02A6, 0x02A7, 0x02A8, 0x02A9, 0x02AA, 0x02AB, 0x02AC, 0x02AD, 0x02AE, 0x02AF, 
	0x02B0, 0x02B1, 0x02B2, 0x02B3, 0x02B4, 0x02B5, 0x02B6, 0x02B7, 0x02B8, 0x02B9, 0x02BA, 0x02BB, 0x02BC, 0x02BD, 0x02BE, 0x02BF, 
	0x02C0, 0x02C1, 0x02C2, 0x02C3, 0x02C4, 0x02C5, 0x02C6, 0x02C7, 0x02C8, 0x02C9, 0x02CA, 0x02CB, 0x02CC, 0x02CD, 0x02CE, 0x02CF, 
	0x02D0, 0x02D1, 0x02D2, 0x02D3, 0x02D4, 0x02D5, 0x02D6, 0x02D7, 0x02D8, 0x02D9, 0x02DA, 0x02DB, 0x02DC, 0x02DD, 0x02DE, 0x02DF, 
	0x02E0, 0x02E1, 0x02E2, 0x02E3, 0x02E4, 0x02E5, 0x02E6, 0x02E7, 0x02E8, 0x02E9, 0x02EA, 0x02EB, 0x02EC, 0x02ED, 0x02EE, 0x02EF, 
	0x02F0, 0x02F1, 0x02F2, 0x02F3, 0x02F4, 0x02F5, 0x02F6, 0x02F7, 0x02F8, 0x02F9, 0x02FA, 0x02FB, 0x02FC, 0x02FD, 0x02FE, 0x02FF, 
	0x0300, 0x0301, 0x0302, 0x0303, 0x0304, 0x0305, 0x0306, 0x0307, 0x0308, 0x0309, 0x030A, 0x030B, 0x030C, 0x030D, 0x030E, 0x030F, 
	0x0310, 0x0311, 0x0312, 0x0313, 0x0314, 0x0315, 0x0316, 0x0317, 0x0318, 0x0319, 0x031A, 0x031B, 0x031C, 0x031D, 0x031E, 0x031F, 
	0x0320, 0x0321, 0x0322, 0x0323, 0x0324, 0x0325, 0x0326, 0x0327, 0x0328, 0x0329, 0x032A, 0x032B, 0x032C, 0x032D, 0x032E, 0x032F, 
	0x0330, 0x0331, 0x0332, 0x0333, 0x0334, 0x0335, 0x0336, 0x0337, 0x0338, 0x0339, 0x033A, 0x033B, 0x033C, 0x033D, 0x033E, 0x033F, 
	0x0340, 0x0341, 0x0342, 0x0343, 0x0344, 0x0345, 0x0346, 0x0347, 0x0348, 0x0349, 0x034A, 0x034B, 0x034C, 0x034D, 0x034E, 0x034F, 
	0x0350, 0x0351, 0x0352, 0x0353, 0x0354, 0x0355, 0x0356, 0x0357, 0x0358, 0x0359, 0x035A, 0x035B, 0x035C, 0x035D, 0x035E, 0x035F, 
	0x0360, 0x0361, 0x0362, 0x0363, 0x0364, 0x0365, 0x0366, 0x0367, 0x0368, 0x0369, 0x036A, 0x036B, 0x036C, 0x036D, 0x036E, 0x036F, 
	0x0370, 0x0370, 0x0372, 0x0372, 0x0374, 0x0375, 0x0376, 0x0376, 0x0378, 0x0379, 0x037A, 0x03FD, 0x03FE, 0x03FF, 0x037E, 0x037F, 
	0x0380, 0x0381, 0x0382, 0x0383, 0x0384, 0x0385, 0x0386, 0x0387, 0x0388, 0x0389, 0x038A, 0x038B, 0x038C, 0x038D, 0x038E, 0x038F, 
	0x0390, 0x0391, 0x0392, 0x0393, 0x0394, 0x0395, 0x0396, 0x0397, 0x0398, 0x0399, 0x039A, 0x039B, 0x039C, 0x039D, 0x039E, 0x039F, 
	0x03A0, 0x03A1, 0x03A2, 0x03A3, 0x03A4, 0x03A5, 0x03A6, 0x03A7, 0x03A8, 0x03A9, 0x03AA, 0x03AB, 0x0386, 0x0388, 0x0389, 0x038A, 
	0x03B0, 0x0391, 0x03D0, 0x0393, 0x0394, 0x03F5, 0x0396, 0x0397, 0x03F4, 0x1FBE, 0x03F0, 0x039B, 0x039C, 0x039D, 0x039E, 0x039F, 
	0x03D6, 0x03F1, 0x03C2, 0x03C2, 0x03A4, 0x03A5, 0x03D5, 0x03A7, 0x03A8, 0x2126, 0x03AA, 0x03AB, 0x038C, 0x038E, 0x038F, 0x03CF, 
	0x03D0, 0x03D1, 0x03D2, 0x03D3, 0x03D4, 0x03D5, 0x03D6, 0x03CF, 0x03D8, 0x03D8, 0x03DA, 0x03DA, 0x03DC, 0x03DC, 0x03DE, 0x03DE, 
	0x03E0, 0x03E0, 0x03E2, 0x03E2, 0x03E4, 0x03E4, 0x03E6, 0x03E6, 0x03E8, 0x03E8, 0x03EA, 0x03EA, 0x03EC, 0x03EC, 0x03EE, 0x03EE, 
	0x03F0, 0x03F1, 0x03F9, 0x03F3, 0x03F4, 0x03F5, 0x03F6, 0x03F7, 0x03F7, 0x03F9, 0x03FA, 0x03FA, 0x03FC, 0x03FD, 0x03FE, 0x03FF
	
};


static UStruct uDataUC[679]={
	{ 0x0430, 0x0410 }, { 0x0431, 0x0411 }, { 0x0432, 0x0412 }, { 0x0433, 0x0413 }, { 0x0434, 0x0414 }, { 0x0435, 0x0415 }, { 0x0436, 0x0416 }, 
	{ 0x0437, 0x0417 }, { 0x0438, 0x0418 }, { 0x0439, 0x0419 }, { 0x043A, 0x041A }, { 0x043B, 0x041B }, { 0x043C, 0x041C }, { 0x043D, 0x041D }, 
	{ 0x043E, 0x041E }, { 0x043F, 0x041F }, { 0x0440, 0x0420 }, { 0x0441, 0x0421 }, { 0x0442, 0x0422 }, { 0x0443, 0x0423 }, { 0x0444, 0x0424 }, 
	{ 0x0445, 0x0425 }, { 0x0446, 0x0426 }, { 0x0447, 0x0427 }, { 0x0448, 0x0428 }, { 0x0449, 0x0429 }, { 0x044A, 0x042A }, { 0x044B, 0x042B }, 
	{ 0x044C, 0x042C }, { 0x044D, 0x042D }, { 0x044E, 0x042E }, { 0x044F, 0x042F }, { 0x0450, 0x0400 }, { 0x0451, 0x0401 }, { 0x0452, 0x0402 }, 
	{ 0x0453, 0x0403 }, { 0x0454, 0x0404 }, { 0x0455, 0x0405 }, { 0x0456, 0x0406 }, { 0x0457, 0x0407 }, { 0x0458, 0x0408 }, { 0x0459, 0x0409 }, 
	{ 0x045A, 0x040A }, { 0x045B, 0x040B }, { 0x045C, 0x040C }, { 0x045D, 0x040D }, { 0x045E, 0x040E }, { 0x045F, 0x040F }, { 0x0461, 0x0460 }, 
	{ 0x0463, 0x0462 }, { 0x0465, 0x0464 }, { 0x0467, 0x0466 }, { 0x0469, 0x0468 }, { 0x046B, 0x046A }, { 0x046D, 0x046C }, { 0x046F, 0x046E }, 
	{ 0x0471, 0x0470 }, { 0x0473, 0x0472 }, { 0x0475, 0x0474 }, { 0x0477, 0x0476 }, { 0x0479, 0x0478 }, { 0x047B, 0x047A }, { 0x047D, 0x047C }, 
	{ 0x047F, 0x047E }, { 0x0481, 0x0480 }, { 0x048B, 0x048A }, { 0x048D, 0x048C }, { 0x048F, 0x048E }, { 0x0491, 0x0490 }, { 0x0493, 0x0492 }, 
	{ 0x0495, 0x0494 }, { 0x0497, 0x0496 }, { 0x0499, 0x0498 }, { 0x049B, 0x049A }, { 0x049D, 0x049C }, { 0x049F, 0x049E }, { 0x04A1, 0x04A0 }, 
	{ 0x04A3, 0x04A2 }, { 0x04A5, 0x04A4 }, { 0x04A7, 0x04A6 }, { 0x04A9, 0x04A8 }, { 0x04AB, 0x04AA }, { 0x04AD, 0x04AC }, { 0x04AF, 0x04AE }, 
	{ 0x04B1, 0x04B0 }, { 0x04B3, 0x04B2 }, { 0x04B5, 0x04B4 }, { 0x04B7, 0x04B6 }, { 0x04B9, 0x04B8 }, { 0x04BB, 0x04BA }, { 0x04BD, 0x04BC }, 
	{ 0x04BF, 0x04BE }, { 0x04C2, 0x04C1 }, { 0x04C4, 0x04C3 }, { 0x04C6, 0x04C5 }, { 0x04C8, 0x04C7 }, { 0x04CA, 0x04C9 }, { 0x04CC, 0x04CB }, 
	{ 0x04CE, 0x04CD }, { 0x04CF, 0x04C0 }, { 0x04D1, 0x04D0 }, { 0x04D3, 0x04D2 }, { 0x04D5, 0x04D4 }, { 0x04D7, 0x04D6 }, { 0x04D9, 0x04D8 }, 
	{ 0x04DB, 0x04DA }, { 0x04DD, 0x04DC }, { 0x04DF, 0x04DE }, { 0x04E1, 0x04E0 }, { 0x04E3, 0x04E2 }, { 0x04E5, 0x04E4 }, { 0x04E7, 0x04E6 }, 
	{ 0x04E9, 0x04E8 }, { 0x04EB, 0x04EA }, { 0x04ED, 0x04EC }, { 0x04EF, 0x04EE }, { 0x04F1, 0x04F0 }, { 0x04F3, 0x04F2 }, { 0x04F5, 0x04F4 }, 
	{ 0x04F7, 0x04F6 }, { 0x04F9, 0x04F8 }, { 0x04FB, 0x04FA }, { 0x04FD, 0x04FC }, { 0x04FF, 0x04FE }, { 0x0501, 0x0500 }, { 0x0503, 0x0502 }, 
	{ 0x0505, 0x0504 }, { 0x0507, 0x0506 }, { 0x0509, 0x0508 }, { 0x050B, 0x050A }, { 0x050D, 0x050C }, { 0x050F, 0x050E }, { 0x0511, 0x0510 }, 
	{ 0x0513, 0x0512 }, { 0x0515, 0x0514 }, { 0x0517, 0x0516 }, { 0x0519, 0x0518 }, { 0x051B, 0x051A }, { 0x051D, 0x051C }, { 0x051F, 0x051E }, 
	{ 0x0521, 0x0520 }, { 0x0523, 0x0522 }, { 0x0525, 0x0524 }, { 0x0527, 0x0526 }, { 0x0561, 0x0531 }, { 0x0562, 0x0532 }, { 0x0563, 0x0533 }, 
	{ 0x0564, 0x0534 }, { 0x0565, 0x0535 }, { 0x0566, 0x0536 }, { 0x0567, 0x0537 }, { 0x0568, 0x0538 }, { 0x0569, 0x0539 }, { 0x056A, 0x053A }, 
	{ 0x056B, 0x053B }, { 0x056C, 0x053C }, { 0x056D, 0x053D }, { 0x056E, 0x053E }, { 0x056F, 0x053F }, { 0x0570, 0x0540 }, { 0x0571, 0x0541 }, 
	{ 0x0572, 0x0542 }, { 0x0573, 0x0543 }, { 0x0574, 0x0544 }, { 0x0575, 0x0545 }, { 0x0576, 0x0546 }, { 0x0577, 0x0547 }, { 0x0578, 0x0548 }, 
	{ 0x0579, 0x0549 }, { 0x057A, 0x054A }, { 0x057B, 0x054B }, { 0x057C, 0x054C }, { 0x057D, 0x054D }, { 0x057E, 0x054E }, { 0x057F, 0x054F }, 
	{ 0x0580, 0x0550 }, { 0x0581, 0x0551 }, { 0x0582, 0x0552 }, { 0x0583, 0x0553 }, { 0x0584, 0x0554 }, { 0x0585, 0x0555 }, { 0x0586, 0x0556 }, 
	{ 0x1D79, 0xA77D }, { 0x1D7D, 0x2C63 }, { 0x1E01, 0x1E00 }, { 0x1E03, 0x1E02 }, { 0x1E05, 0x1E04 }, { 0x1E07, 0x1E06 }, { 0x1E09, 0x1E08 }, 
	{ 0x1E0B, 0x1E0A }, { 0x1E0D, 0x1E0C }, { 0x1E0F, 0x1E0E }, { 0x1E11, 0x1E10 }, { 0x1E13, 0x1E12 }, { 0x1E15, 0x1E14 }, { 0x1E17, 0x1E16 }, 
	{ 0x1E19, 0x1E18 }, { 0x1E1B, 0x1E1A }, { 0x1E1D, 0x1E1C }, { 0x1E1F, 0x1E1E }, { 0x1E21, 0x1E20 }, { 0x1E23, 0x1E22 }, { 0x1E25, 0x1E24 }, 
	{ 0x1E27, 0x1E26 }, { 0x1E29, 0x1E28 }, { 0x1E2B, 0x1E2A }, { 0x1E2D, 0x1E2C }, { 0x1E2F, 0x1E2E }, { 0x1E31, 0x1E30 }, { 0x1E33, 0x1E32 }, 
	{ 0x1E35, 0x1E34 }, { 0x1E37, 0x1E36 }, { 0x1E39, 0x1E38 }, { 0x1E3B, 0x1E3A }, { 0x1E3D, 0x1E3C }, { 0x1E3F, 0x1E3E }, { 0x1E41, 0x1E40 }, 
	{ 0x1E43, 0x1E42 }, { 0x1E45, 0x1E44 }, { 0x1E47, 0x1E46 }, { 0x1E49, 0x1E48 }, { 0x1E4B, 0x1E4A }, { 0x1E4D, 0x1E4C }, { 0x1E4F, 0x1E4E }, 
	{ 0x1E51, 0x1E50 }, { 0x1E53, 0x1E52 }, { 0x1E55, 0x1E54 }, { 0x1E57, 0x1E56 }, { 0x1E59, 0x1E58 }, { 0x1E5B, 0x1E5A }, { 0x1E5D, 0x1E5C }, 
	{ 0x1E5F, 0x1E5E }, { 0x1E61, 0x1E9B }, { 0x1E63, 0x1E62 }, { 0x1E65, 0x1E64 }, { 0x1E67, 0x1E66 }, { 0x1E69, 0x1E68 }, { 0x1E6B, 0x1E6A }, 
	{ 0x1E6D, 0x1E6C }, { 0x1E6F, 0x1E6E }, { 0x1E71, 0x1E70 }, { 0x1E73, 0x1E72 }, { 0x1E75, 0x1E74 }, { 0x1E77, 0x1E76 }, { 0x1E79, 0x1E78 }, 
	{ 0x1E7B, 0x1E7A }, { 0x1E7D, 0x1E7C }, { 0x1E7F, 0x1E7E }, { 0x1E81, 0x1E80 }, { 0x1E83, 0x1E82 }, { 0x1E85, 0x1E84 }, { 0x1E87, 0x1E86 }, 
	{ 0x1E89, 0x1E88 }, { 0x1E8B, 0x1E8A }, { 0x1E8D, 0x1E8C }, { 0x1E8F, 0x1E8E }, { 0x1E91, 0x1E90 }, { 0x1E93, 0x1E92 }, { 0x1E95, 0x1E94 }, 
	{ 0x1EA1, 0x1EA0 }, { 0x1EA3, 0x1EA2 }, { 0x1EA5, 0x1EA4 }, { 0x1EA7, 0x1EA6 }, { 0x1EA9, 0x1EA8 }, { 0x1EAB, 0x1EAA }, { 0x1EAD, 0x1EAC }, 
	{ 0x1EAF, 0x1EAE }, { 0x1EB1, 0x1EB0 }, { 0x1EB3, 0x1EB2 }, { 0x1EB5, 0x1EB4 }, { 0x1EB7, 0x1EB6 }, { 0x1EB9, 0x1EB8 }, { 0x1EBB, 0x1EBA }, 
	{ 0x1EBD, 0x1EBC }, { 0x1EBF, 0x1EBE }, { 0x1EC1, 0x1EC0 }, { 0x1EC3, 0x1EC2 }, { 0x1EC5, 0x1EC4 }, { 0x1EC7, 0x1EC6 }, { 0x1EC9, 0x1EC8 }, 
	{ 0x1ECB, 0x1ECA }, { 0x1ECD, 0x1ECC }, { 0x1ECF, 0x1ECE }, { 0x1ED1, 0x1ED0 }, { 0x1ED3, 0x1ED2 }, { 0x1ED5, 0x1ED4 }, { 0x1ED7, 0x1ED6 }, 
	{ 0x1ED9, 0x1ED8 }, { 0x1EDB, 0x1EDA }, { 0x1EDD, 0x1EDC }, { 0x1EDF, 0x1EDE }, { 0x1EE1, 0x1EE0 }, { 0x1EE3, 0x1EE2 }, { 0x1EE5, 0x1EE4 }, 
	{ 0x1EE7, 0x1EE6 }, { 0x1EE9, 0x1EE8 }, { 0x1EEB, 0x1EEA }, { 0x1EED, 0x1EEC }, { 0x1EEF, 0x1EEE }, { 0x1EF1, 0x1EF0 }, { 0x1EF3, 0x1EF2 }, 
	{ 0x1EF5, 0x1EF4 }, { 0x1EF7, 0x1EF6 }, { 0x1EF9, 0x1EF8 }, { 0x1EFB, 0x1EFA }, { 0x1EFD, 0x1EFC }, { 0x1EFF, 0x1EFE }, { 0x1F00, 0x1F08 }, 
	{ 0x1F01, 0x1F09 }, { 0x1F02, 0x1F0A }, { 0x1F03, 0x1F0B }, { 0x1F04, 0x1F0C }, { 0x1F05, 0x1F0D }, { 0x1F06, 0x1F0E }, { 0x1F07, 0x1F0F }, 
	{ 0x1F10, 0x1F18 }, { 0x1F11, 0x1F19 }, { 0x1F12, 0x1F1A }, { 0x1F13, 0x1F1B }, { 0x1F14, 0x1F1C }, { 0x1F15, 0x1F1D }, { 0x1F20, 0x1F28 }, 
	{ 0x1F21, 0x1F29 }, { 0x1F22, 0x1F2A }, { 0x1F23, 0x1F2B }, { 0x1F24, 0x1F2C }, { 0x1F25, 0x1F2D }, { 0x1F26, 0x1F2E }, { 0x1F27, 0x1F2F }, 
	{ 0x1F30, 0x1F38 }, { 0x1F31, 0x1F39 }, { 0x1F32, 0x1F3A }, { 0x1F33, 0x1F3B }, { 0x1F34, 0x1F3C }, { 0x1F35, 0x1F3D }, { 0x1F36, 0x1F3E }, 
	{ 0x1F37, 0x1F3F }, { 0x1F40, 0x1F48 }, { 0x1F41, 0x1F49 }, { 0x1F42, 0x1F4A }, { 0x1F43, 0x1F4B }, { 0x1F44, 0x1F4C }, { 0x1F45, 0x1F4D }, 
	{ 0x1F51, 0x1F59 }, { 0x1F53, 0x1F5B }, { 0x1F55, 0x1F5D }, { 0x1F57, 0x1F5F }, { 0x1F60, 0x1F68 }, { 0x1F61, 0x1F69 }, { 0x1F62, 0x1F6A }, 
	{ 0x1F63, 0x1F6B }, { 0x1F64, 0x1F6C }, { 0x1F65, 0x1F6D }, { 0x1F66, 0x1F6E }, { 0x1F67, 0x1F6F }, { 0x1F70, 0x1FBA }, { 0x1F71, 0x1FBB }, 
	{ 0x1F72, 0x1FC8 }, { 0x1F73, 0x1FC9 }, { 0x1F74, 0x1FCA }, { 0x1F75, 0x1FCB }, { 0x1F76, 0x1FDA }, { 0x1F77, 0x1FDB }, { 0x1F78, 0x1FF8 }, 
	{ 0x1F79, 0x1FF9 }, { 0x1F7A, 0x1FEA }, { 0x1F7B, 0x1FEB }, { 0x1F7C, 0x1FFA }, { 0x1F7D, 0x1FFB }, { 0x1FB0, 0x1FB8 }, { 0x1FB1, 0x1FB9 }, 
	{ 0x1FD0, 0x1FD8 }, { 0x1FD1, 0x1FD9 }, { 0x1FE0, 0x1FE8 }, { 0x1FE1, 0x1FE9 }, { 0x1FE5, 0x1FEC }, { 0x214E, 0x2132 }, { 0x2170, 0x2160 }, 
	{ 0x2171, 0x2161 }, { 0x2172, 0x2162 }, { 0x2173, 0x2163 }, { 0x2174, 0x2164 }, { 0x2175, 0x2165 }, { 0x2176, 0x2166 }, { 0x2177, 0x2167 }, 
	{ 0x2178, 0x2168 }, { 0x2179, 0x2169 }, { 0x217A, 0x216A }, { 0x217B, 0x216B }, { 0x217C, 0x216C }, { 0x217D, 0x216D }, { 0x217E, 0x216E }, 
	{ 0x217F, 0x216F }, { 0x2184, 0x2183 }, { 0x24D0, 0x24B6 }, { 0x24D1, 0x24B7 }, { 0x24D2, 0x24B8 }, { 0x24D3, 0x24B9 }, { 0x24D4, 0x24BA }, 
	{ 0x24D5, 0x24BB }, { 0x24D6, 0x24BC }, { 0x24D7, 0x24BD }, { 0x24D8, 0x24BE }, { 0x24D9, 0x24BF }, { 0x24DA, 0x24C0 }, { 0x24DB, 0x24C1 }, 
	{ 0x24DC, 0x24C2 }, { 0x24DD, 0x24C3 }, { 0x24DE, 0x24C4 }, { 0x24DF, 0x24C5 }, { 0x24E0, 0x24C6 }, { 0x24E1, 0x24C7 }, { 0x24E2, 0x24C8 }, 
	{ 0x24E3, 0x24C9 }, { 0x24E4, 0x24CA }, { 0x24E5, 0x24CB }, { 0x24E6, 0x24CC }, { 0x24E7, 0x24CD }, { 0x24E8, 0x24CE }, { 0x24E9, 0x24CF }, 
	{ 0x2C30, 0x2C00 }, { 0x2C31, 0x2C01 }, { 0x2C32, 0x2C02 }, { 0x2C33, 0x2C03 }, { 0x2C34, 0x2C04 }, { 0x2C35, 0x2C05 }, { 0x2C36, 0x2C06 }, 
	{ 0x2C37, 0x2C07 }, { 0x2C38, 0x2C08 }, { 0x2C39, 0x2C09 }, { 0x2C3A, 0x2C0A }, { 0x2C3B, 0x2C0B }, { 0x2C3C, 0x2C0C }, { 0x2C3D, 0x2C0D }, 
	{ 0x2C3E, 0x2C0E }, { 0x2C3F, 0x2C0F }, { 0x2C40, 0x2C10 }, { 0x2C41, 0x2C11 }, { 0x2C42, 0x2C12 }, { 0x2C43, 0x2C13 }, { 0x2C44, 0x2C14 }, 
	{ 0x2C45, 0x2C15 }, { 0x2C46, 0x2C16 }, { 0x2C47, 0x2C17 }, { 0x2C48, 0x2C18 }, { 0x2C49, 0x2C19 }, { 0x2C4A, 0x2C1A }, { 0x2C4B, 0x2C1B }, 
	{ 0x2C4C, 0x2C1C }, { 0x2C4D, 0x2C1D }, { 0x2C4E, 0x2C1E }, { 0x2C4F, 0x2C1F }, { 0x2C50, 0x2C20 }, { 0x2C51, 0x2C21 }, { 0x2C52, 0x2C22 }, 
	{ 0x2C53, 0x2C23 }, { 0x2C54, 0x2C24 }, { 0x2C55, 0x2C25 }, { 0x2C56, 0x2C26 }, { 0x2C57, 0x2C27 }, { 0x2C58, 0x2C28 }, { 0x2C59, 0x2C29 }, 
	{ 0x2C5A, 0x2C2A }, { 0x2C5B, 0x2C2B }, { 0x2C5C, 0x2C2C }, { 0x2C5D, 0x2C2D }, { 0x2C5E, 0x2C2E }, { 0x2C61, 0x2C60 }, { 0x2C65, 0x023A }, 
	{ 0x2C66, 0x023E }, { 0x2C68, 0x2C67 }, { 0x2C6A, 0x2C69 }, { 0x2C6C, 0x2C6B }, { 0x2C73, 0x2C72 }, { 0x2C76, 0x2C75 }, { 0x2C81, 0x2C80 }, 
	{ 0x2C83, 0x2C82 }, { 0x2C85, 0x2C84 }, { 0x2C87, 0x2C86 }, { 0x2C89, 0x2C88 }, { 0x2C8B, 0x2C8A }, { 0x2C8D, 0x2C8C }, { 0x2C8F, 0x2C8E }, 
	{ 0x2C91, 0x2C90 }, { 0x2C93, 0x2C92 }, { 0x2C95, 0x2C94 }, { 0x2C97, 0x2C96 }, { 0x2C99, 0x2C98 }, { 0x2C9B, 0x2C9A }, { 0x2C9D, 0x2C9C }, 
	{ 0x2C9F, 0x2C9E }, { 0x2CA1, 0x2CA0 }, { 0x2CA3, 0x2CA2 }, { 0x2CA5, 0x2CA4 }, { 0x2CA7, 0x2CA6 }, { 0x2CA9, 0x2CA8 }, { 0x2CAB, 0x2CAA }, 
	{ 0x2CAD, 0x2CAC }, { 0x2CAF, 0x2CAE }, { 0x2CB1, 0x2CB0 }, { 0x2CB3, 0x2CB2 }, { 0x2CB5, 0x2CB4 }, { 0x2CB7, 0x2CB6 }, { 0x2CB9, 0x2CB8 }, 
	{ 0x2CBB, 0x2CBA }, { 0x2CBD, 0x2CBC }, { 0x2CBF, 0x2CBE }, { 0x2CC1, 0x2CC0 }, { 0x2CC3, 0x2CC2 }, { 0x2CC5, 0x2CC4 }, { 0x2CC7, 0x2CC6 }, 
	{ 0x2CC9, 0x2CC8 }, { 0x2CCB, 0x2CCA }, { 0x2CCD, 0x2CCC }, { 0x2CCF, 0x2CCE }, { 0x2CD1, 0x2CD0 }, { 0x2CD3, 0x2CD2 }, { 0x2CD5, 0x2CD4 }, 
	{ 0x2CD7, 0x2CD6 }, { 0x2CD9, 0x2CD8 }, { 0x2CDB, 0x2CDA }, { 0x2CDD, 0x2CDC }, { 0x2CDF, 0x2CDE }, { 0x2CE1, 0x2CE0 }, { 0x2CE3, 0x2CE2 }, 
	{ 0x2CEC, 0x2CEB }, { 0x2CEE, 0x2CED }, { 0x2D00, 0x10A0 }, { 0x2D01, 0x10A1 }, { 0x2D02, 0x10A2 }, { 0x2D03, 0x10A3 }, { 0x2D04, 0x10A4 }, 
	{ 0x2D05, 0x10A5 }, { 0x2D06, 0x10A6 }, { 0x2D07, 0x10A7 }, { 0x2D08, 0x10A8 }, { 0x2D09, 0x10A9 }, { 0x2D0A, 0x10AA }, { 0x2D0B, 0x10AB }, 
	{ 0x2D0C, 0x10AC }, { 0x2D0D, 0x10AD }, { 0x2D0E, 0x10AE }, { 0x2D0F, 0x10AF }, { 0x2D10, 0x10B0 }, { 0x2D11, 0x10B1 }, { 0x2D12, 0x10B2 }, 
	{ 0x2D13, 0x10B3 }, { 0x2D14, 0x10B4 }, { 0x2D15, 0x10B5 }, { 0x2D16, 0x10B6 }, { 0x2D17, 0x10B7 }, { 0x2D18, 0x10B8 }, { 0x2D19, 0x10B9 }, 
	{ 0x2D1A, 0x10BA }, { 0x2D1B, 0x10BB }, { 0x2D1C, 0x10BC }, { 0x2D1D, 0x10BD }, { 0x2D1E, 0x10BE }, { 0x2D1F, 0x10BF }, { 0x2D20, 0x10C0 }, 
	{ 0x2D21, 0x10C1 }, { 0x2D22, 0x10C2 }, { 0x2D23, 0x10C3 }, { 0x2D24, 0x10C4 }, { 0x2D25, 0x10C5 }, { 0xA641, 0xA640 }, { 0xA643, 0xA642 }, 
	{ 0xA645, 0xA644 }, { 0xA647, 0xA646 }, { 0xA649, 0xA648 }, { 0xA64B, 0xA64A }, { 0xA64D, 0xA64C }, { 0xA64F, 0xA64E }, { 0xA651, 0xA650 }, 
	{ 0xA653, 0xA652 }, { 0xA655, 0xA654 }, { 0xA657, 0xA656 }, { 0xA659, 0xA658 }, { 0xA65B, 0xA65A }, { 0xA65D, 0xA65C }, { 0xA65F, 0xA65E }, 
	{ 0xA661, 0xA660 }, { 0xA663, 0xA662 }, { 0xA665, 0xA664 }, { 0xA667, 0xA666 }, { 0xA669, 0xA668 }, { 0xA66B, 0xA66A }, { 0xA66D, 0xA66C }, 
	{ 0xA681, 0xA680 }, { 0xA683, 0xA682 }, { 0xA685, 0xA684 }, { 0xA687, 0xA686 }, { 0xA689, 0xA688 }, { 0xA68B, 0xA68A }, { 0xA68D, 0xA68C }, 
	{ 0xA68F, 0xA68E }, { 0xA691, 0xA690 }, { 0xA693, 0xA692 }, { 0xA695, 0xA694 }, { 0xA697, 0xA696 }, { 0xA723, 0xA722 }, { 0xA725, 0xA724 }, 
	{ 0xA727, 0xA726 }, { 0xA729, 0xA728 }, { 0xA72B, 0xA72A }, { 0xA72D, 0xA72C }, { 0xA72F, 0xA72E }, { 0xA733, 0xA732 }, { 0xA735, 0xA734 }, 
	{ 0xA737, 0xA736 }, { 0xA739, 0xA738 }, { 0xA73B, 0xA73A }, { 0xA73D, 0xA73C }, { 0xA73F, 0xA73E }, { 0xA741, 0xA740 }, { 0xA743, 0xA742 }, 
	{ 0xA745, 0xA744 }, { 0xA747, 0xA746 }, { 0xA749, 0xA748 }, { 0xA74B, 0xA74A }, { 0xA74D, 0xA74C }, { 0xA74F, 0xA74E }, { 0xA751, 0xA750 }, 
	{ 0xA753, 0xA752 }, { 0xA755, 0xA754 }, { 0xA757, 0xA756 }, { 0xA759, 0xA758 }, { 0xA75B, 0xA75A }, { 0xA75D, 0xA75C }, { 0xA75F, 0xA75E }, 
	{ 0xA761, 0xA760 }, { 0xA763, 0xA762 }, { 0xA765, 0xA764 }, { 0xA767, 0xA766 }, { 0xA769, 0xA768 }, { 0xA76B, 0xA76A }, { 0xA76D, 0xA76C }, 
	{ 0xA76F, 0xA76E }, { 0xA77A, 0xA779 }, { 0xA77C, 0xA77B }, { 0xA77F, 0xA77E }, { 0xA781, 0xA780 }, { 0xA783, 0xA782 }, { 0xA785, 0xA784 }, 
	{ 0xA787, 0xA786 }, { 0xA78C, 0xA78B }, { 0xA791, 0xA790 }, { 0xA7A1, 0xA7A0 }, { 0xA7A3, 0xA7A2 }, { 0xA7A5, 0xA7A4 }, { 0xA7A7, 0xA7A6 }, 
	{ 0xA7A9, 0xA7A8 }, { 0xFF41, 0xFF21 }, { 0xFF42, 0xFF22 }, { 0xFF43, 0xFF23 }, { 0xFF44, 0xFF24 }, { 0xFF45, 0xFF25 }, { 0xFF46, 0xFF26 }, 
	{ 0xFF47, 0xFF27 }, { 0xFF48, 0xFF28 }, { 0xFF49, 0xFF29 }, { 0xFF4A, 0xFF2A }, { 0xFF4B, 0xFF2B }, { 0xFF4C, 0xFF2C }, { 0xFF4D, 0xFF2D }, 
	{ 0xFF4E, 0xFF2E }, { 0xFF4F, 0xFF2F }, { 0xFF50, 0xFF30 }, { 0xFF51, 0xFF31 }, { 0xFF52, 0xFF32 }, { 0xFF53, 0xFF33 }, { 0xFF54, 0xFF34 }, 
	{ 0xFF55, 0xFF35 }, { 0xFF56, 0xFF36 }, { 0xFF57, 0xFF37 }, { 0xFF58, 0xFF38 }, { 0xFF59, 0xFF39 }, { 0xFF5A, 0xFF3A }, 
};

unsigned  UnicodeUC(unsigned ch)
{
	if (ch<1024) return tab1024UC[ch];

	if (ch <= 0xFFFF) {
		int L = 0, R = 679;
		while (L < R) 
		{
			int i = (L+R)/2;
			if (ch <= uDataUC[i].a) R=i; else L=i+1;
		}
		return uDataUC[R].a == ch ? uDataUC[R].b : ch;
	}

	return ch >= 0x10400+40 && ch <= 0x10427+40 ? ch-40 : ch;
}

}; //namespace wal

